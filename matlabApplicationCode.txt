classdef localizationApplication < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                        matlab.ui.Figure
        TabGroup                        matlab.ui.container.TabGroup
        SetupTab                        matlab.ui.container.Tab
        ScenariosetupPanel              matlab.ui.container.Panel
        NodenumberLabel                 matlab.ui.control.Label
        NodeNumber                      matlab.ui.control.NumericEditField
        AnchornoderangemLabel           matlab.ui.control.Label
        RangeAnchor                     matlab.ui.control.NumericEditField
        NormalnoderangemLabel           matlab.ui.control.Label
        RangeNode                       matlab.ui.control.NumericEditField
        NodedeploymentDropDownLabel     matlab.ui.control.Label
        NodedeploymentDropDown          matlab.ui.control.DropDown
        AnchornumberautogeneratedLabel  matlab.ui.control.Label
        anchornumber                    matlab.ui.control.NumericEditField
        SinkleaveblankforautoselectEditFieldLabel  matlab.ui.control.Label
        SinkleaveblankforautoselectEditField  matlab.ui.control.EditField
        AnchordeploymentDropDownLabel   matlab.ui.control.Label
        AnchordeploymentDropDown        matlab.ui.control.DropDown
        NetworksizeEditFieldLabel       matlab.ui.control.Label
        NetworksizeEditField            matlab.ui.control.EditField
        CreatescenarioButton            matlab.ui.control.Button
        SidemEditFieldLabel             matlab.ui.control.Label
        SidemEditField                  matlab.ui.control.EditField
        PacketsizesetupPanel            matlab.ui.container.Panel
        WakeupbyteEditFieldLabel        matlab.ui.control.Label
        WakeupbyteEditField             matlab.ui.control.NumericEditField
        BroadcastbyteEditFieldLabel     matlab.ui.control.Label
        BroadcastbyteEditField          matlab.ui.control.NumericEditField
        DatabyteLabel                   matlab.ui.control.Label
        DataPacketEditField             matlab.ui.control.NumericEditField
        SimulationsetupPanel            matlab.ui.container.Panel
        NodeEventsButtonGroup           matlab.ui.container.ButtonGroup
        RandomEvent                     matlab.ui.control.RadioButton
        ManualEvent                     matlab.ui.control.RadioButton
        ManualeventEditField            matlab.ui.control.EditField
        EventTable                      matlab.ui.control.Table
        Pause1                          matlab.ui.control.CheckBox
        Pause2                          matlab.ui.control.CheckBox
        Pause3                          matlab.ui.control.CheckBox
        Pause4                          matlab.ui.control.CheckBox
        GeneratenodeeventsButton        matlab.ui.control.Button
        SimulationTimesecEditFieldLabel  matlab.ui.control.Label
        SimulationTimesecEditField      matlab.ui.control.NumericEditField
        SaveEventsTable                 matlab.ui.control.Button
        LoadEventsTable                 matlab.ui.control.Button
        Pause0                          matlab.ui.control.CheckBox
        NodestatussetupPanel            matlab.ui.container.Panel
        DeadNodesTable                  matlab.ui.control.Table
        AddtodeadnodesButton            matlab.ui.control.Button
        AddtorestorednodesButton        matlab.ui.control.Button
        DeadnodesLabel                  matlab.ui.control.Label
        RestorednodesLabel              matlab.ui.control.Label
        ClearDeadTableButton            matlab.ui.control.Button
        ClearRestoredTableButton        matlab.ui.control.Button
        NodeEventEditFieldLabel         matlab.ui.control.Label
        NodeEventEditField              matlab.ui.control.NumericEditField
        NodeIDEditFieldLabel            matlab.ui.control.Label
        NodeIDEditField                 matlab.ui.control.NumericEditField
        RestoredNodesTable              matlab.ui.control.Table
        GraphsetupPanel                 matlab.ui.container.Panel
        ShowallgraphsCheckBox           matlab.ui.control.CheckBox
        LocalizationerrorCheckBox       matlab.ui.control.CheckBox
        EnergyconsumptionwrtnodeIDCheckBox  matlab.ui.control.CheckBox
        EnergyconsumptionwrttimeCheckBox  matlab.ui.control.CheckBox
        StackedenergyconsumptionCheckBox  matlab.ui.control.CheckBox
        SwitchEnergyConsumption         matlab.ui.control.Switch
        StackednergyconsumptionTextField  matlab.ui.control.EditField
        EnergyconsumptionofnodeTextField  matlab.ui.control.EditField
        AllnodesindividualCheckBox      matlab.ui.control.CheckBox
        AnchorsindividualCheckBox       matlab.ui.control.CheckBox
        NodesCheckBox                   matlab.ui.control.CheckBox
        wrttimeCheckBox                 matlab.ui.control.CheckBox
        pertimestampCheckBox            matlab.ui.control.CheckBox
        wrtdeploymentareaCheckBox       matlab.ui.control.CheckBox
        NetworkAvgenergyconsmpCheckBox  matlab.ui.control.CheckBox
        EnergysetupPanel                matlab.ui.container.Panel
        InitialEnergyJLabel             matlab.ui.control.Label
        Eo                              matlab.ui.control.NumericEditField
        WuRxEnergyCosumpWEditFieldLabel  matlab.ui.control.Label
        WuRxEnergyCosumpWEditField      matlab.ui.control.NumericEditField
        CriticalPowerEditFieldLabel     matlab.ui.control.Label
        CriticalPowerEditField          matlab.ui.control.NumericEditField
        TransmitterGaindBLabel          matlab.ui.control.Label
        Gtx                             matlab.ui.control.NumericEditField
        ReceiverGaindBLabel             matlab.ui.control.Label
        Grx                             matlab.ui.control.NumericEditField
        FrequencyMHzLabel               matlab.ui.control.Label
        Freq                            matlab.ui.control.NumericEditField
        PathlossexponentLabel           matlab.ui.control.Label
        pathLossExponent                matlab.ui.control.NumericEditField
        GaussianrandomdBLabel           matlab.ui.control.Label
        Gaussian                        matlab.ui.control.NumericEditField
        EelecnJbitLabel                 matlab.ui.control.Label
        Eelec                           matlab.ui.control.NumericEditField
        EfspJbitm2Label                 matlab.ui.control.Label
        Efs                             matlab.ui.control.NumericEditField
        EmppJbitm4Label                 matlab.ui.control.Label
        Emp                             matlab.ui.control.NumericEditField
        DrefmLabel                      matlab.ui.control.Label
        Dref                            matlab.ui.control.NumericEditField
        PtxWLabel                       matlab.ui.control.Label
        Pt                              matlab.ui.control.NumericEditField
        ComparisionpanelPanel           matlab.ui.container.Panel
        SaveasLabel                     matlab.ui.control.Label
        SaveasDropDown                  matlab.ui.control.DropDown
        ClearallscenariosButton         matlab.ui.control.Button
        CompareButton                   matlab.ui.control.Button
        SavescenarioButton              matlab.ui.control.Button
        RunSimulationButton             matlab.ui.control.Button
        ClearallButton                  matlab.ui.control.Button
        ClearcacheButton                matlab.ui.control.Button
        v18Label                        matlab.ui.control.Label
        OutputTab                       matlab.ui.container.Tab
        CommandwindowTextArea           matlab.ui.control.TextArea
        DatabaseTable                   matlab.ui.control.Table
        SummaryTextArea                 matlab.ui.control.TextArea
        SummaryLabel                    matlab.ui.control.Label
        LogLabel                        matlab.ui.control.Label
        MatricesTab                     matlab.ui.container.Tab
        TabGroup2                       matlab.ui.container.TabGroup
        EnergyTab                       matlab.ui.container.Tab
        EtTable                         matlab.ui.control.Table
        OndemandTab                     matlab.ui.container.Tab
        EtodTable                       matlab.ui.control.Table
    end

    properties (Access = private)
        mydeadnodetable = [];
        myrestorenodetable = [];
        flag_generateEvent = 0; % Description
        prop_myscenario1 = [];
        prop_myscenario2 = [];
        prop_myscenario3 = [];
        prop_distError = [];
        prop_anchornumber = [];
        prop_NetworkEnergyConsumption = [];
    end
    methods (Access = private)
        function[networkSize,anchor,anchornumber,sink,node,rangeAnchor,rangeNode,p0,p1] = Scenario(app)
            close all;
            global f1;
            f1 = figure('Name','Simulation: Deployment graph','NumberTitle','off');
            grid on; hold on; box on;
            title('Simulation: Deployment graph');
            networkSize = str2num(app.NetworksizeEditField.Value);
            nodenumber = app.NodeNumber.Value;
            rangeAnchor = app.RangeAnchor.Value;
            rangeNode = app.RangeNode.Value;
            deployment = app.AnchordeploymentDropDown.Value;
            
            if (strcmp(app.NodedeploymentDropDown.Value,'Pre-saved'))
                load('savednodes.mat', 'savednodes')
                node=savednodes(1:nodenumber,:);
                node=[networkSize(1)*node(:,1) networkSize(2)*node(:,2)];
            elseif (strcmp(app.NodedeploymentDropDown.Value,'Random'))
                node=[networkSize(1)*round(rand(nodenumber,1),4) networkSize(2)*round(rand(nodenumber,1),4)];
            end
            if (strcmp(deployment,'Square Grid') || strcmp(deployment,'Square Random'))
                if  (strcmp(deployment,'Square Grid'))
                    xlim([0 networkSize(1)]);  ylim([0 networkSize(2)]);
                    temp1=linspace(0,networkSize(1),ceil((networkSize(1)/rangeAnchor)+1));
                    temp2=linspace(0,networkSize(2),ceil((networkSize(2)/rangeAnchor)+1));
                    temp3=1;
                    for i= 1:size(temp1,2)
                        for j=1:size(temp2,2)
                            anchor(temp3,:) = [temp1(i) temp2(j)]; %#ok<*AGROW,*SAGROW>
                            p1=plot (temp1(i),temp2(j),'b^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','b');
                            temp3=temp3+1;
                        end
                    end
                elseif (strcmp(deployment,'Square Random'))
                    temp1=ceil((networkSize(1)/rangeAnchor)+1);
                    temp1=temp1*temp1;
                    anchor=[networkSize(1)*round(rand(temp1,1),4) networkSize(2)*round(rand(temp1,1),4)];
                    p1=plot (anchor(:,1),anchor(:,2),'b^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','b');
                end
                anchornumber=size(anchor,1);
                %naming all nodes
                temp1 = cellstr(num2str((1:size(anchor))'));
                for i=1:size(anchor)
                    text(anchor(i,1)+1,anchor(i,2)+1, temp1(i));
                end
                %select sink
                temp3 = str2num(app.SinkleaveblankforautoselectEditField.Value);
                if isempty(temp3)
                    for j=1:anchornumber
                        if anchor(j,:)==networkSize/2 %anchor present at centre, assign that anchor as sink
                            sink=j;
                            break;
                        else %no anchor present at centre, find nearest anchor to centre and  assign that anchor as sink
                            temp2=0;
                            for temp1 = 1 : anchornumber
                                temp2(temp1,:)=norm(  networkSize/2  -  [anchor(temp1,1) anchor(temp1,2)]  );
                            end
                            sink=find(temp2==min(temp2));
                            if numel(sink)>1 %to remove error for 4 anchors
                                sink=sink(1);
                            end
                        end
                    end
                else
                    sink = temp3;
                end
                p0=plot((anchor(sink,1)),(anchor(sink,2)),'k^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','k');
                
            elseif (strcmp(deployment,'Hexagonal Grid'))
                xmin = 0; ymin = 0;
                xmax = networkSize(1); ymax = networkSize(2);
                xorigin = 0;
                yorigin = 0;
                if isempty(str2num(app.SidemEditField.Value))
                    side = rangeAnchor / 2;
                else
                    side = str2num(app.SidemEditField.Value);
                end
                anchor = hexagonalGrid(app,[xmin ymin xmax ymax], [xorigin yorigin], side);
                anchornumber=size(anchor,1);
                for j=1:anchornumber %draw hexagonal sides
                    for k=1:anchornumber
                        dist = round(norm(anchor(j,:) - anchor(k,:)),1);
                        if dist <= side
                            line([anchor(j,1) anchor(k,1)],[anchor(j,2) anchor(k,2)],'color','y','HandleVisibility','off');
                        end
                    end
                end
                p1=plot (anchor(:,1),anchor(:,2),'b^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','b');
                %naming all nodes
                temp1 = cellstr(num2str((1:size(anchor))'));
                for i=1:size(anchor)
                    text(anchor(i,1)+1,anchor(i,2)+1, temp1(i));
                end
                %select sink
                temp3 = str2num(app.SinkleaveblankforautoselectEditField.Value);
                if isempty(temp3)
                    for j=1:anchornumber
                        if anchor(j,:)==networkSize/2 %anchor present at centre, assign that anchor as sink
                            sink=j;
                            break;
                        else %no anchor present at centre, find nearest anchor to centre and  assign that anchor as sink
                            temp2=0;
                            for temp1 = 1 : anchornumber
                                temp2(temp1,:)=norm(  networkSize/2  -  [anchor(temp1,1) anchor(temp1,2)]  );
                            end
                            sink=find(temp2==min(temp2));
                            if numel(sink)>1 %to remove error for 4 anchors
                                sink=sink(1);
                            end
                        end
                    end
                else
                    sink = temp3;
                end
                p0=plot((anchor(sink,1)),(anchor(sink,2)),'k^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','k');
                
            elseif (strcmp(deployment,'Hexagon vertex, center sink'))
                %https://de.mathworks.com/matlabcentral/answers/33593-generate-uniformly-distributed-points-inside-a-hexagon
                side = str2num(app.SidemEditField.Value);
                centerx = networkSize(1)/2;
                centery = networkSize(2)/2;
                m = 3;
                X = rand(m-1,nodenumber) .^ (1./(m-1:-1:1)');
                X = cumprod([ones(1,nodenumber);X]).*[ones(m,nodenumber)-[X;zeros(1,nodenumber)]];
                z6 = exp(2i*pi/6);
                Z = [0, 1, z6]*X;
                Z = Z .* (z6.^floor(6*rand(1,nodenumber)));
                x = centerx+side*real(Z);
                y = centery+side*imag(Z);
                axis equal
                node = [x(:),y(:)];
                v_x = side * cos((0:6)*pi/3)+centerx;
                v_y = side * sin((0:6)*pi/3)+centery;
                plot(v_x,v_y,'k');
                anchor=[v_x' v_y'];
                anchor=anchor(1:6,:);
                anchor=[anchor; centerx centery];   %adding centre of hexagone as an anchor
                anchornumber=size(anchor,1);
                p1=plot(anchor(:,1),anchor(:,2),'b^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','b');
                %naming all nodes
                temp1 = cellstr(num2str((1:size(anchor))'));
                for i=1:size(anchor)
                    text(anchor(i,1)+1,anchor(i,2)+1, temp1(i));
                end
                sink=7; %centre of hexagon is sink (node 7)
                p0=plot(centerx,centery,'k^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','y');
                
            elseif (strcmp(deployment,'Triangular Grid'))
                if isempty(str2num(app.SidemEditField.Value))
                    side = rangeAnchor;
                else
                    side = str2num(app.SidemEditField.Value);
                end
                v_dist = sqrt(side^2-(side/2)^2); % Vertical distance
                x_lim = 100;
                y_lim = 100;
                anchor = [];
                y_current = 0;
                xx = 0; %#ok<NASGU>
                displacement = 0;
                while y_current < y_lim
                    if displacement == 0
                        xx = [0:side:x_lim]';
                        yy = ones(length(xx), 1)*y_current;
                        displacement = 1;
                    else
                        xx = [side/2:side:x_lim]';
                        yy = ones(length(xx), 1)*y_current;
                        displacement = 0;
                    end
                    anchor = [anchor; [xx,yy]];
                    y_current = y_current + v_dist;
                end
                anchornumber=size(anchor,1);
                for j=1:anchornumber %draw triangle sides
                    for k=1:anchornumber
                        dist = round(norm(anchor(j,:) - anchor(k,:)),1);
                        if dist <= side
                            line([anchor(j,1) anchor(k,1)],[anchor(j,2) anchor(k,2)],'color','y','HandleVisibility','off');
                        end
                    end
                end
                p1=plot (anchor(:,1), anchor(:,2),'b^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','b');
                
                %naming all nodes
                temp1 = cellstr(num2str((1:size(anchor))'));
                for i=1:size(anchor)
                    text(anchor(i,1)+1,anchor(i,2)+1, temp1(i));
                end
                %select sink
                temp3 = str2num(app.SinkleaveblankforautoselectEditField.Value);
                if isempty(temp3)
                    for j=1:anchornumber
                        if anchor(j,:)==networkSize/2 %anchor present at centre, assign that anchor as sink
                            sink=j;
                            break;
                        else %no anchor present at centre, find nearest anchor to centre and  assign that anchor as sink
                            temp2=0;
                            for temp1 = 1 : anchornumber
                                temp2(temp1,:)=norm(  networkSize/2  -  [anchor(temp1,1) anchor(temp1,2)]  );
                            end
                            sink=find(temp2==min(temp2));
                            if numel(sink)>1 %to remove error for 4 anchors
                                sink=sink(1);
                            end
                        end
                    end
                else
                    sink = temp3;
                end
                p0=plot((anchor(sink,1)),(anchor(sink,2)),'k^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','k');
            end
            legend([p0 p1],{'Sink','Primary anchor'})
            
            if app.flag_generateEvent
                close all;
                app.flag_generateEvent = 0;
            end
        end
        
        function varargout = hexagonalGrid(app,bounds, origin, size, varargin)
            %   usage:
            %   PTS = hexagonalGrid(BOUNDS, ORIGIN, SIZE)
            %   generate points, lying in the window defined by BOUNDS (=[xmin ymin
            %   xmax ymax]), starting from origin with a constant step equal to size.
            %   SIZE is constant and is equals to the length of the sides of each
            %   hexagon.
            size = size(1);
            dx = 3*size;
            dy = size*sqrt(3);
            % consider two square grids with different centers
            pts1 = squareGrid(app,bounds, origin + [0 0],        [dx dy], varargin{:});
            pts2 = squareGrid(app,bounds, origin + [dx/3 0],     [dx dy], varargin{:});
            pts3 = squareGrid(app,bounds, origin + [dx/2 dy/2],  [dx dy], varargin{:});
            pts4 = squareGrid(app,bounds, origin + [-dx/6 dy/2], [dx dy], varargin{:});
            % gather points
            pts = [pts1;pts2;pts3;pts4];
            % eventually compute also edges, clipped by bounds
            % TODO : manage generation of edges
            if nargout > 1
                edges = zeros([0 4]);
                x0 = origin(1);
                y0 = origin(2);
                % find all x coordinate
                x1 = bounds(1) + mod(x0-bounds(1), dx);
                x2 = bounds(3) - mod(bounds(3)-x0, dx);
                lx = (x1:dx:x2)';
                % horizontal edges : first find y's
                y1 = bounds(2) + mod(y0-bounds(2), dy);
                y2 = bounds(4) - mod(bounds(4)-y0, dy);
                ly = (y1:dy:y2)';
                
                % number of points in each coord, and total number of points
                ny = length(ly);
                nx = length(lx);
                
                if bounds(1)-x1+dx < size
                    disp('intersect bounding box');
                end
                
                if bounds(3)-x2 < size
                    disp('intersect 2');
                    edges = [edges;repmat(x2, [ny 1]) ly repmat(bounds(3), [ny 1]) ly];
                    x2 = x2-dx;
                    lx = (x1:dx:x2)';
                    nx = length(lx);
                end
                
                for i = 1:length(ly)
                    ind = (1:nx)';
                    tmpEdges = zeros(length(ind), 4);
                    tmpEdges(ind, 1) = lx;
                    tmpEdges(ind, 2) = ly(i);
                    tmpEdges(ind, 3) = lx+size;
                    tmpEdges(ind, 4) = ly(i);
                    edges = [edges; tmpEdges];
                end
                
            end
            % process output arguments
            if nargout > 0
                varargout{1} = pts;
                
                if nargout > 1
                    varargout{2} = edges;
                end
            end
        end
        
        function varargout = squareGrid(app,bounds, origin, size)
            %   PTS = squareGrid(BOUNDS, ORIGIN, SIZE)
            %   generate points, lying in the window defined by BOUNDS (=[xmin ymin
            %   xmax ymax]), starting from origin with a constant step equal to size.
            %   Example
            %   PTS = squareGrid([0 0 10 10], [3 3], [4 2])
            %   will return points :
            %   [3 1;7 1;3 3;7 3;3 5;7 5;3 7;7 7;3 9;7 9];
            % find all x coordinate
            x1 = bounds(1) + mod(origin(1)-bounds(1), size(1));
            x2 = bounds(3) - mod(bounds(3)-origin(1), size(1));
            lx = (x1:size(1):x2)';
            % find all y coordinate
            y1 = bounds(2) + mod(origin(2)-bounds(2), size(2));
            y2 = bounds(4) - mod(bounds(4)-origin(2), size(2));
            ly = (y1:size(2):y2)';
            % number of points in each coord, and total number of points
            ny = length(ly);
            nx = length(lx);
            np = nx*ny;
            % create points
            pts = zeros(np, 2);
            for i=1:ny
                pts( (1:nx)'+(i-1)*nx, 1) = lx;
                pts( (1:nx)'+(i-1)*nx, 2) = ly(i);
            end
            % process output
            if nargout>0
                varargout{1} = pts;
            end
        end
        
        function [x_approx,y_approx]=trilateration(app,n,d,database_pos) %#ok<*INUSL>
            %trilateration for location estimation
            %(https://www.researchgate.net/profile/Azubuike_Aniedu/publication/262232977_Tilateration_Based_Localization_Algorithm_for_Wireless_Sensor_Network/links/5784e7df08ae37d3af6da8ea/Tilateration-Based-Localization-Algorithm-for-Wireless-Sensor-Network.pdf)
            n1=n(1);
            n2=n(2);
            n3=n(3);
            d1=d(1);
            d2=d(2);
            d3=d(3);
            x1=database_pos(n1,1);     y1=database_pos(n1,2);
            x2=database_pos(n2,1);     y2=database_pos(n2,2);
            x3=database_pos(n3,1);     y3=database_pos(n3,2);
            
            if x2 == x3 %to avoid inf values of x_approx
                %fprintf('***nodes swapped to avoid inf results.\n');
                x1=database_pos(n2,1);     y1=database_pos(n2,2);
                x2=database_pos(n1,1);     y2=database_pos(n1,2);
                [d1, d2] = deal(d2,d1);
            end
            temp1=((d2.^2-d3.^2)-(x2.^2-x3.^2)-(y2.^2-y3.^2))/2;
            temp2=((d2.^2-d1.^2)-(x2.^2-x1.^2)-(y2.^2-y1.^2))/2;
            y_approx=(temp2*(x3-x2)-temp1*(x1-x2))/((y1-y2)*(x3-x2)-(y3-y2)*(x1-x2));
            x_approx=(temp1-y_approx*(y3-y2))/(x3-x2);
        end
        
        function[x_approx,y_approx,stddevinfo] = multilateration(app,nearnodes,dist,database_pos)
            stddev=1;
            stddevinfo = create_stddev_cell(app);
            stddevinfo(1,2:5)=num2cell(nearnodes');
            %fprintf('Four nearest nodes within range : %s \n',num2str(nearnodes'));
            
            combxy = nchoosek(nearnodes,3);
            stddevinfo(3:6,1:3)=num2cell(combxy);
            
            combdist = nchoosek(dist,3);
            temp3=zeros(4,2);
            for j=1:4
                [temp3(j,1),temp3(j,2)]=trilateration(app,combxy(j,:),combdist(j,:),database_pos);
            end
            temp3=round(temp3,2);
            stddevinfo(3:6,4:5)=num2cell(temp3);
            tempx=temp3(:,1);
            tempy=temp3(:,2);
            
            %---standard deviation---%
            stddevmat = std(temp3); %calculating std. deviation
            stddevinfo(7,4:5)=num2cell(stddevmat);  %for updating database
            
            if numel(unique(tempx))==3 || numel(unique(tempx))==2 || numel(unique(tempx))==1   %if one of four x_approx values in approx is repeated
                %fprintf('>>values repeated in tempx.\n');
                [temp1,temp2]=unique(tempx); %#ok<*ASGLU>
                temp2=setxor(temp2,1:numel(tempx));
                x_approx=tempx(temp2); %x_approx=repeated value
                if numel(x_approx)==2 || numel(x_approx)==3
                    %fprintf('>>numel(x_approx)==2||numel(x_approx)==3 \n');
                    x_approx=mean(tempx,'omitnan');
                end
                stddevinfo(12,5)=num2cell(x_approx);
            else
                combx=nchoosek(tempx,3);    %get all possible 3 values combinations in 4 given values
                combx=round(combx,2);
                stddevinfo(9:12,1:3)=num2cell(combx);
                combxstd = std(combx,0,2);  %row-wise std  dev
                combxstd = round(combxstd,2);
                stddevinfo(9:12,4)=num2cell(combxstd);
                
                if numel(unique(combxstd))==4 || (numel(unique(combxstd))==2 || numel(unique(combxstd))==3)     %no values repeated in combxstd
                    if numel(unique(combxstd))==4
                        %fprintf('>>no values repeated in combxstd.\n');
                    elseif (numel(unique(combxstd))==2 || numel(unique(combxstd))==3)
                        %fprintf('>>values repeated in combxstd.\n');
                    end
                    if min(combxstd) > stddev
                        %fprintf('>>min std dev for combxstd is high.\n');
                        tempx=combx(combxstd == min(combxstd),:);
                        if size(tempx,1)>1
                            %fprintf('>>min std dev for combxstd is repeated.\n');
                            temp1=zeros(size(tempx,1),2);
                            for temp2=1:size(temp1,1)
                                combx=nchoosek(tempx(temp2,:),2);
                                combxstd = std(combx,0,2);
                                temp1(temp2,1)=min(combxstd);
                                temp1(temp2,2)=mean(combx(combxstd == min(combxstd),:));
                            end
                            combx=temp1(:,2);
                            combxstd=temp1(:,1);
                            x_approx = mean(combx(combxstd == min(combxstd),:));
                            stddevinfo(9:8+size(tempx,1),1:3)=num2cell(tempx);
                            stddevinfo(9:8+size(tempx,1),4)=num2cell(combxstd);
                            stddevinfo(9+size(tempx,1):12,1:4)={''''''''''''''''''''''''''''};
                        else
                            combx=nchoosek(tempx,2);
                            combxstd = std(combx,0,2);
                            stddevinfo(9:11,1:2)=num2cell(combx);
                            stddevinfo(9:11,4)=num2cell(combxstd);
                            stddevinfo(12,1:4)={''''''''''''''''''''''''''''};
                            stddevinfo(9:11,3)={''''''''''''''''''''''''''''};
                            x_approx = mean(combx(combxstd == min(combxstd),:));
                            if min(combxstd)>2.5*stddev && stddevmat(1)>15*stddev
                                %fprintf('>>x_approx value may have high errors.\n');
                            end
                        end
                    else
                        x_approx = mean(combx(combxstd == min(combxstd),:));
                    end
                    if numel(x_approx)>1
                        x_approx=mean(x_approx,'omitnan');
                    end
                elseif numel(unique(combxstd))==1 % if all values in combxstd are same
                    %fprintf('>>all values in combxstd are same.\n');
                    x_approx = mean(tempx,'omitnan');
                end
                stddevinfo(8+find(combxstd == min(combxstd)),5)=num2cell(x_approx);
            end
            
            if numel(unique(tempy))==3 || numel(unique(tempy))==2 || numel(unique(tempy))==1 %if one of four y_approx values in approx is repeated
                %fprintf('>>values repeated in tempy.\n');
                [temp1,temp2]=unique(tempy);
                temp2=setxor(temp2,1:numel(tempy));
                y_approx=tempy(temp2); %y_approx=repeated value
                if numel(y_approx)==2 || numel(y_approx)==3
                    %fprintf('>>numel(y_approx)==2||numel(y_approx)==3 \n');
                    y_approx=mean(tempy,'omitnan');
                end
                stddevinfo(17,5)=num2cell(y_approx);
                
            else
                comby = nchoosek(tempy,3);    %get all possible 3 values combinations in 4 given values
                comby=round(comby,2);
                stddevinfo(14:17,1:3)=num2cell(comby);
                combystd = std(comby,0,2);  %row-wise std  dev
                combystd = round(combystd,2);
                stddevinfo(14:17,4)=num2cell(combystd);
                
                if numel(unique(combystd))==4 || (numel(unique(combystd))==2 || numel(unique(combystd))==3)     %no values repeated in combystd
                    if numel(unique(combystd))==4
                        %fprintf('>>no values repeated in combystd.\n');
                    elseif (numel(unique(combystd))==2 || numel(unique(combystd))==3)
                        %fprintf('>>values repeated in combystd.\n');
                    end
                    if min(combystd) > stddev
                        %fprintf('>>min std dev for combystd is high.\n');
                        tempy=comby(combystd == min(combystd),:);
                        if size(tempy,1)>1
                            %fprintf('>>min std dev for combystd is repeated.\n');
                            temp1=zeros(size(tempy,1),2);
                            for temp2=1:size(temp1,1)
                                comby=nchoosek(tempy(temp2,:),2);
                                combystd = std(comby,0,2);
                                temp1(temp2,1)=min(combystd);
                                if numel(nonzeros(combystd == min(combystd)))>1
                                    for j=1:numel(combystd)
                                        if combystd(j) == min(combystd)
                                            temp1(temp2,2)=comby(j);
                                            break;
                                        end
                                    end
                                else
                                    temp1(temp2,2)=mean(comby(combystd == min(combystd),:));
                                end
                            end
                            comby=temp1(:,2);
                            combystd=temp1(:,1);
                            y_approx = mean(comby(combystd == min(combystd),:));
                            stddevinfo(14:13+size(tempy,1),1:3)=num2cell(tempy);
                            stddevinfo(14:13+size(tempy,1),4)=num2cell(combystd);
                            stddevinfo(14+size(tempx,1):17,1:4)={''''''''''''''''''''''''''''};
                        else
                            comby=nchoosek(tempy,2);
                            combystd = std(comby,0,2);
                            stddevinfo(14:16,1:2)=num2cell(comby);
                            stddevinfo(14:16,4)=num2cell(combystd);
                            stddevinfo(17,1:4)={''''''''''''''''''''''''''''};
                            stddevinfo(14:16,3)={''''''''''''''''''''''''''''};
                            y_approx = mean(comby(combystd == min(combystd),:));
                            if min(combystd)>2.5*stddev  && stddevmat(2)>15*stddev
                                %fprintf('>>y_approx value may have high errors.\n');
                            end
                        end
                    else
                        y_approx = mean(comby(combystd == min(combystd),:));
                    end
                    if numel(y_approx)>1
                        y_approx=mean(y_approx,'omitnan');
                    end
                elseif numel(unique(combystd))==1 % if all values in combystd are same
                    %fprintf('>>all values in combystd are same.\n');
                    y_approx = mean(tempy,'omitnan');
                end
                stddevinfo(13+find(combystd == min(combystd)),5)=num2cell(y_approx);
            end
            x_approx=round(x_approx,2);
            y_approx=round(y_approx,2);
        end
        
        function[Etx,Erx]=energyConsume(app,d,k)
            %             Eelec=50e-9;
            %             Efs=10e-12;
            %             Emp=0.0013e-12;
            %             EDA=5e-9;
            Eelec = app.Eelec.Value * 1e-9;
            Efs = app.Efs.Value * 1e-12;
            Emp = app.Emp.Value * 1e-12;
            d0=sqrt(Efs/Emp);
            k=k*8; %packet size in bits
            if d<d0
                Etx = k*Eelec + k*Efs*(d^2);
            else
                Etx = k*Eelec + k*Emp*(d^4);
            end
            Erx = k*Eelec;
        end
        
        function db_path = findAlternatePath(app,db_path,db_neighbour,deadnode)
            
            for k=size(db_path,1):-1:1
                if k == deadnode
                    continue;
                end
                temp10=db_path{k};
                for m=1:numel(temp10)
                    if temp10(m) == deadnode
                        %re-find path to sink
                        fprintf('Node %s -> Old path       -> [ %s ] \n',num2str(k),num2str(temp10));
                        temp1 = k; % here, temp1 is current node with critical/dead node in sink-path
                        temp2 = db_neighbour{temp1,1};
                        temp2 = temp2(temp2~=deadnode);
                        %temp2 = temp2(temp2~=(i+anchornumber));
                        temp3 = zeros(size(temp2,1),1); %sink-path distances of neighbours
                        for n=1:size(temp2,1)
                            temp3(n) = db_path{temp2(n),2};
                        end
                        [temp4,temp5] = sort(temp3);
                        temp6 = temp2(temp5); %sorted neighbour list wrt low to high path distance
                        temp8 = 0;
                        for n=1:size(temp6,1)
                            temp7=db_path{temp6(n),1};
                            for p=1:size(temp7,2)
                                if temp7(p) == deadnode
                                    break;
                                end
                                if temp7(p) ~= deadnode && p == size(temp7,2)
                                    temp8 = temp7;
                                    break;
                                end
                            end
                            if temp8 ~= 0
                                break;
                            end
                        end
                        temp2 = temp10(1:find(temp10 == temp1));
                        temp9 = [temp2 temp8];
                        fprintf('        -> Alternate path -> [ %s ] \n',num2str(temp9));
                        
                        %updating this path in db_path
                        db_path(k,1)={temp9};
                        temp11=db_neighbour{k,1};
                        temp12=db_neighbour{k,2};
                        temp13=temp12(temp11 == temp7(1));
                        db_path(k,2)={temp4(n)+temp13}; %%%%%%%%%%%%%%%%%% check n here %%%%%%%%%%%%%%%%%%%%%%%
                    end
                end
            end
        end
        
        function EstimatedDistance =  distEstimate(app,RealDistance)
            Freq= app.Freq.Value * 1e6;
            TXAntennaGain= app.Gtx.Value;   %db
            RXAntennaGain=app.Grx.Value;    %db
            Dref=app.Dref.Value;    %Meter
            PTx= app.Pt.Value;  %watt
            PathLossExponent=app.pathLossExponent.Value;    % for Free space Line Of sight
            %sigma=0.01;%Principles of communication systems simulation with wireless application P.548
            %mean=0;
            GaussRandom=app.Gaussian.Value;
            Wavelength=3e8/Freq;
            PTxdBm=10*log10(PTx*1000);
            M = Wavelength / (4 * pi * Dref);
            Pr0=PTxdBm + TXAntennaGain + RXAntennaGain- (20*log10(1/M)); %%http://www.daycounter.com/Calculators/Friis-Calculator.phtml
            
            rss=Pr0-(10*PathLossExponent* log10(RealDistance/Dref))+GaussRandom;
            EstimatedDistance = 10 ^ ((Pr0 - rss)/(10 * PathLossExponent));
        end
        
        function stddevinfo= create_stddev_cell(app) %#ok<*MANU>
            stddevinfo=cell(18,5);
            stddevinfo(:) = {''''''''''''''''''''''''''''};
            stddevinfo(1,1)={'nearest->'};
            stddevinfo(2,2)={'''''combxy'''''};
            stddevinfo(2,4)={'''''''tempx'''''''};
            stddevinfo(2,5)={'''''''tempy'''''''};
            stddevinfo(7,3)={'stddevmat'};
            stddevinfo(8,2)={'''''combx'''''''};
            stddevinfo(8,4)={'''combxstd'''};
            stddevinfo(8,5)={'''''x_approx'''};
            stddevinfo(13,2)={'''''comby'''''''};
            stddevinfo(13,4)={'''combystd'''};
            stddevinfo(13,5)={'''''y_approx'''};
            stddevinfo(18,1)={'true_loc->'};
        end
        function restoredNodeLocalization(app,newnodeID,data)
            global db_pos;       global db_neighbour;
            global db_path;                             global db_Etod;
            global db_stddev;    global db_nodestatus;  global db_Et;
            rangeSearch = data.rangeSearch;
            packetsizeBroadcast = data.packetsizeBroadcast;
            node = data.node;
            time = data.time;
            rangeNode = data.rangeNode;
            packetsizeWakeup = data.packetsizeWakeup;
            packetsizeData = data.packetsizeData;
            anchornumber = data.anchornumber;
            %nodenumber = data.nodenumber;
            %wurxEnergyMonitor = data.wurxEnergyMonitor;
            sink = data.sink;
            if newnodeID > anchornumber
                newnode = node(newnodeID-anchornumber,:); %get true location of restored node
            elseif newnodeID <= anchornumber
                newnode = db_pos(newnodeID,:);
            end
            %to clear previous plot
            if newnodeID > anchornumber
                plot (db_pos(newnodeID,1),db_pos(newnodeID,2),'wo','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','w','HandleVisibility','off');
            end
            fprintf('----------------------------------------------------\n');
            fprintf('Node %s \n',num2str(newnodeID));
            
            %% BROADCASTING AND BROADCAST ENERGY CONSUMPTION
            %   energy consumption for new node for broadcasting
            nodesInRange = 0;  %counter for nodes in current rangeSearch
            
            temp5 = zeros(size(db_pos,1),1);  %temp5 = flag (1=broadcast received, 0=not received yet)
            distNoisy=zeros(size(db_pos,1),1);  %preallocating
            for k=1:numel(rangeSearch)
                for j=1:size(db_pos,1)
                    if temp5(j)==1
                        continue;
                    end
                    distNoisy(j,:)=distEstimate(app,norm([db_pos(j,1) db_pos(j,2)]-[newnode(1) newnode(2)]));
                    if distNoisy(j) > rangeNode*rangeSearch(k)/100 || isnan(distNoisy(j))    %check for nodes in SearchRange
                        distNoisy(j)= inf;
                    else
                        temp5(j)=1;
                        nodesInRange=nodesInRange+1;
                        [temp1,temp2]=energyConsume(app,distNoisy(j),packetsizeBroadcast); %wake-up receiver energy consumption for broadcast
                        temp3=temp1+temp2;
                        %new node broadcast energy consumption
                        db_Et(newnodeID,time)=db_Et(newnodeID,time)+temp3;
                        db_Etod(newnodeID,time)=db_Etod(newnodeID,time)+temp3;
                        %neighbour broadcast energy consumption
                        db_Et(j,time)=db_Et(j,time)+temp3;
                        db_Etod(j,time)=db_Etod(j,time)+temp3;
                    end
                    if db_nodestatus(j) == 0 %check if node is dead
                        distNoisy(j)= inf;
                    end
                end
                if nodesInRange == 3 && k==numel(rangeSearch) && j==size(db_pos,1) || nodesInRange>=4
                    %fprintf('No. of nodes in %sm range= %s \n',num2str(rangeNode*rangeSearch(k)/100),num2str(nodesInRange));
                    break;
                end
            end
            %updating neighbour list
            [dist, nearnodes]=sort(distNoisy);
            nodesInRange = sum(~isinf(dist));
            nearnodes=nearnodes(1:nodesInRange,1); %nearnodes= all nodes in coverage
            temp3=dist(1:nodesInRange,1);
            db_neighbour{newnodeID,1}=nearnodes;
            db_neighbour{newnodeID,2}=temp3;
            %updating neighbour list of neighbours(adding current node in theie neighbour list)
            for j=1:numel(nearnodes)
                temp2 = db_neighbour{nearnodes(j),1};
                temp2 = [temp2; newnodeID];
                db_neighbour{nearnodes(j),1} = temp2;
                
                temp4 = db_neighbour{nearnodes(j),2};
                temp4 = [temp4; temp3(j)];
                db_neighbour{nearnodes(j),2} = temp4;
            end
            
            %% LOCALIZATION
            if newnodeID <= anchornumber
                x_approx = db_pos(newnodeID,1); %in case of anchor, x_approax and y_approx = true position, no need of localization
                y_approx = db_pos(newnodeID,2);
                stddevinfo = [];
                fprintf('Node type: Anchor (No localization needed)\n');
                fprintf('True Location     :(%s,%s)\n',num2str(x_approx),num2str(y_approx));
            else
                if nodesInRange<= 2
                    fprintf('Localization not possible! \n');
                    fprintf('----------------------------------------------------\n');
                    db_pos(newnodeID,:) = [NaN NaN];
                    db_path(newnodeID,:) = {NaN NaN};
                    distError(newnodeID,:) = NaN;
                    plot(newnode(1),newnode(2),'rx','MarkerSize',7,'lineWidth',2,'HandleVisibility','off');
                elseif nodesInRange==3  %trilateration
                    [x_approx,y_approx]=trilateration(app,nearnodes(1:3),dist(1:3),db_pos);
                    stddevinfo = create_stddev_cell(app);
                    stddevinfo(18,2)=num2cell(newnode(1));
                    stddevinfo(18,3)=num2cell(newnode(2));
                    stddevinfo(1,2:4)=num2cell(nearnodes(1:3)');
                    stddevinfo(3,1:3)=num2cell(nearnodes(1:3)');
                    stddevinfo(3,4:5)=num2cell([x_approx y_approx]);
                elseif nodesInRange>=4 %multilateration with four nodes
                    [x_approx,y_approx,stddevinfo] = multilateration(app,nearnodes(1:4),dist(1:4),db_pos);
                    stddevinfo(18,2)=num2cell(newnode(1));
                    stddevinfo(18,3)=num2cell(newnode(2));
                end
                %LOCALIZATION ERROR CALCULATION
                distError(newnodeID,:)=norm([newnode(1) newnode(2)]-[x_approx y_approx]);
                fprintf('Localization error = %sm \n',num2str(distError(newnodeID)));
                fprintf('True Location     :(%s,%s) \nEstimated Location:(%s,%s)\n',num2str(newnode(1)),num2str(newnode(2)),num2str(x_approx),num2str(y_approx));
            end
            %% FINDING PATH TO SINK
            distNoisy2=zeros(size(db_pos,1),1);
            for k=1:numel(rangeSearch)
                for j=1:size(db_pos,1)
                    distNoisy2(j,:)=distEstimate(app,norm([db_pos(j,1) db_pos(j,2)]-[x_approx y_approx]));
                    if j == newnodeID || db_nodestatus(j) == 0 || distNoisy2(j) > rangeNode*rangeSearch(k)/100 || isnan(distNoisy2(j))
                        distNoisy2(j)= inf;
                    end
                end
            end
            for j=1:size(db_pos,1)
                if db_nodestatus(j) == 2 %check if node is pathless
                    distNoisy2(j)= inf;
                end
            end
            [temp1, temp2]=sort(distNoisy2);
            temp3 = sum(~isinf(temp1));
            temp1 = temp1(1:temp3);
            temp2=temp2(1:temp3,1); %temp2= all nodes in coverage
            pathdistance=zeros(numel(temp2),1);    %path distances of near nodes, temp2 = nearnodes without pathless nodes
            for j=1:numel(temp2)
                pathdistance(j)=db_path{temp2(j),2};
            end
            pathdistance=pathdistance + temp1(1:temp3);
            shortpath=db_path{(temp2(pathdistance==min(pathdistance))),1};
            pathdistance=pathdistance(pathdistance==min(pathdistance)); %shortest path distance
            shortpath=[newnodeID shortpath];   %shortest path to sink
            fprintf('Path to Sink: [ %s ] \n',num2str(shortpath));
            
            %check for path validity
            deadNodeDetected = 0;
            for j=2:size(shortpath,2) %start from j=2 as 1st node in path is the new node itself
                if db_nodestatus(shortpath(j)) == 0
                    deadnode = shortpath(j); % shortpath(j)=dead node
                    if deadnode == sink
                        continue;
                    end
                    deadNodeDetected = 1;
                    fprintf('Node %s is dead in this path! \n',num2str(deadnode));
                    prevNode = shortpath(j-1); % shortpath(j-1)=previous node of dead node
                    temp2 = db_neighbour{prevNode,1};
                    temp2 = temp2(temp2~=deadnode);
                    temp2 = temp2(temp2~=(newnodeID));
                    temp3 = zeros(size(temp2,1),1);  %sink-path distances of neighbours
                    for k=1:size(temp2,1)
                        temp3(k) = db_path{temp2(k),2};
                    end
                    [temp4,temp5] = sort(temp3);
                    temp6 = temp2(temp5); %sorted neighbour list wrt low to high path distance
                    prevNodeUpdatedPath = 0;
                    for k=1:size(temp6,1)
                        temp7=db_path{temp6(k),1};
                        for m=1:size(temp7,2)
                            if temp7(m) == deadnode
                                break;
                            end
                            if temp7(m) ~= deadnode && m == size(temp7,2)
                                prevNodeUpdatedPath = temp7;
                                prevNodeUpdatedPathDistance = temp4(k);
                                break;
                            end
                        end
                        if prevNodeUpdatedPath ~= 0
                            break;
                        end
                    end
                    temp2 = shortpath(1:find(shortpath == prevNode));
                    shortpath = [temp2 prevNodeUpdatedPath];
                    prevNodeUpdatedPath = [prevNode prevNodeUpdatedPath];
                    temp10=db_neighbour{prevNode,1};
                    temp11=db_neighbour{prevNode,2};
                    temp12=temp11(temp10 == prevNodeUpdatedPath(2));
                    prevNodeUpdatedPathDistance = prevNodeUpdatedPathDistance + temp12;
                    fprintf('Alternate path: [ %s ] \n',num2str(shortpath));
                end
            end
            %% UPDATING DATABASE
            approxnewnode =[ x_approx y_approx ];
            db_pos(newnodeID,:) = approxnewnode; %#ok<*AGROW>
            db_stddev{newnodeID}=stddevinfo;
            db_path(newnodeID,1)={shortpath};
            db_path(newnodeID,2)={pathdistance};
            if deadNodeDetected == 1 %updating the prev node of dead node
                db_path(prevNode,1)={prevNodeUpdatedPath};
                db_path(prevNode,2)={prevNodeUpdatedPathDistance};
            end
            
            %updating dead sink-paths
            if deadNodeDetected == 1
                fprintf('. . . . . . . . . . . . . . . . . . .\n');
                fprintf('Updating path database: Node %s is dead. \n',num2str(deadnode));
                db_path = findAlternatePath(app,db_path,db_neighbour,deadnode);
            end
            fprintf('----------------------------------------------------\n');
            
            %% ENERGY CONSUMPTION CALCULATION
            %   energy consumption for new node for communicating near nodes
            for j=1:numel(nearnodes)
                [temp1,temp2]=energyConsume(app,dist(j),packetsizeWakeup); %wake-up receiver energy consumption
                [~,temp3]=energyConsume(app,dist(j),packetsizeData); %data reception energy consumption
                temp3=temp1+temp2+temp3;
                db_Et(newnodeID,time)=db_Et(newnodeID,time)+temp3;
                db_Etod(newnodeID,time)=db_Etod(newnodeID,time)+temp3;
            end
            %   energy consumption for each near node to communicate with new node
            for j=1:numel(nearnodes)
                [temp1,temp2]=energyConsume(app,dist(j),packetsizeWakeup); %wake-up receiver energy consumption
                [temp3,~]=energyConsume(app,dist(j),packetsizeData); %data transmission energy consumption
                temp3=temp1+temp2+temp3;
                db_Et(nearnodes(j),time)=db_Et(nearnodes(j),time)+temp3;
                db_Etod(nearnodes(j),time)=db_Etod(nearnodes(j),time)+temp3;
            end
            %   energy consumption for path nodes
            temp5=db_path{newnodeID,1};  %loading path from database
            if ~isempty(temp5)
                temp4=zeros(numel(temp5)-1,1);  %temp4 = distance between consecutive path nodes
                for j=1:numel(temp4)
                    temp4(j,:)=(norm([db_pos(temp5(j),1) db_pos(temp5(j),2)]-[db_pos(temp5(j+1),1) db_pos(temp5(j+1),2)]));
                end
                for j=1:numel(temp5)
                    if j==1 %(first node, new node itself)
                        [temp1,temp2]=energyConsume(app,temp4(j),packetsizeWakeup); %wake-up receiver energy consumption
                        [temp3,~]=energyConsume(app,temp4(j),packetsizeData); %data transmission energy consumption
                        temp3=temp1+temp2+temp3;
                        db_Et(temp5(j),time)=db_Et(temp5(j),time)+temp3;
                        db_Etod(temp5(j),time)=db_Etod(temp5(j),time)+temp3;
                    elseif j==numel(temp5)  %(last node, sink)
                        [temp1,temp2]=energyConsume(app,temp4(j-1),packetsizeWakeup); %wake-up receiver energy consumption
                        [~,temp3]=energyConsume(app,temp4(j-1),packetsizeData); %data reception energy consumption
                        temp3=temp1+temp2+temp3;
                        db_Et(temp5(j),time)=db_Et(temp5(j),time)+temp3;
                        db_Etod(temp5(j),time)=db_Etod(temp5(j),time)+temp3;
                    else   %(intermediate path nodess)
                        [temp1,temp2]=energyConsume(app,temp4(j-1),packetsizeWakeup); %wake-up receiver energy consumption
                        [~,temp3]=energyConsume(app,temp4(j-1),packetsizeData); %data reception energy consumption
                        temp3=temp1+temp2+temp3;
                        db_Et(temp5(j),time)=db_Et(temp5(j),time)+temp3;
                        db_Etod(temp5(j),time)=db_Etod(temp5(j),time)+temp3;
                        
                        [temp1,temp2]=energyConsume(app,temp4(j),packetsizeWakeup); %wake-up receiver energy consumption
                        [temp3,~]=energyConsume(app,temp4(j),packetsizeData); %data transmission energy consumption
                        temp3=temp1+temp2+temp3;
                        db_Et(temp5(j),time)=db_Et(temp5(j),time)+temp3;
                        db_Etod(temp5(j),time)=db_Etod(temp5(j),time)+temp3;
                        
                    end
                end
            end
            
            %%  PLOT & LEGEND
            if newnodeID > anchornumber
                plot(approxnewnode(1),approxnewnode(2),'m+','MarkerSize',6,'lineWidth',2,'HandleVisibility','off');
                line([newnode(1) approxnewnode(1)],[newnode(2) approxnewnode(2)],'color','m','HandleVisibility','off');
            elseif newnodeID <= anchornumber
                plot (db_pos(newnodeID,1),db_pos(newnodeID,2),'b^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','b','HandleVisibility','off');
            end
        end
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: RunSimulationButton
        function RunSimulationButtonPushed(app, event)
            close all;
            clc;
            format shortg;
            %error inturrupts
            if( app.StackedenergyconsumptionCheckBox.Value && isempty(str2num(app.StackednergyconsumptionTextField.Value)))
                msgbox('Error in Graph setup section. Not enough or invalid input argument!','Error','error');
                error('Not enough or invalid input argument!');
            end
            
            %log file
            diary off;
            if isfile ('commandwindowtext.txt')
                delete('commandwindowtext.txt')
            end
            diary ('commandwindowtext.txt')
            app.CommandwindowTextArea.Value = fileread('commandwindowtext.txt');
            
            [networkSize,anchor,anchornumber,sink,node,rangeAnchor,rangeNode,p0,p1]=Scenario(app);
            app.anchornumber.Value = anchornumber;
            deadNodeList = app.DeadNodesTable.Data;
            restoreNodeList = app.RestoredNodesTable.Data;
            nodenumber = app.NodeNumber.Value;
            Eo = app.Eo.Value; %#ok<*ADPROPLC>
            packetsizeWakeup= app.WakeupbyteEditField.Value;   %(byte)
            packetsizeData=app.DataPacketEditField.Value;     %(byte)
            packetsizeBroadcast=app.BroadcastbyteEditField.Value;   %(byte)
            rangeSearch=[100]; %#ok<*NBRAK> % rangeSearch = percentage of rangeNode in each iteration
            wurxEnergyMonitor= app.WuRxEnergyCosumpWEditField.Value; %WuRX energy consumption(monitoring)=7.5microWatt per sec=7.5 microJ
            timesim=app.SimulationTimesecEditField.Value;
            app.DatabaseTable.Data = [];
            
            if (app.RandomEvent.Value)
                if(isempty(app.EventTable.Data))
                    %event=sort(round(timesim.*rand(nodenumber,1),0)); %auto event setup
                    event = sort(randi([1 timesim],nodenumber,1));
                    event(:,2)=anchornumber+1:anchornumber+nodenumber;
                    app.EventTable.Data = event;
                else
                    event=app.EventTable.Data;
                end
            elseif (app.ManualEvent.Value)
                if(isempty(app.EventTable.Data))
                    msgbox('No manual events found!','Error','error');
                    error('No manual events found!');
                end
                event=app.EventTable.Data; %manual event setup
            end
            loc_req=[]; %node ID
            
            data.rangeSearch = rangeSearch;
            data.packetsizeBroadcast = packetsizeBroadcast;
            data.node = node;
            %data.nextEventNode = nextEventNode;
            %data.nextEvent = nextEvent;
            %data.time = time;
            data.rangeNode = rangeNode;
            data.packetsizeWakeup = packetsizeWakeup;
            data.packetsizeData = packetsizeData;
            data.anchornumber = anchornumber;
            data.nodenumber = nodenumber;
            data.wurxEnergyMonitor = wurxEnergyMonitor;
            data.sink = sink;
            
            %% CREATE DATABASE
            global db_pos;       global db_neighbour;   global db_Etmon;    global db_Et2;
            global db_path;                             global db_Etod;     global db_Etod2;
            global db_stddev;    global db_nodestatus;  global db_Et;
            
            db_pos = anchor;
            db_stddev = cell(anchornumber+nodenumber,1);
            db_path = cell(anchornumber+nodenumber,2);
            db_neighbour = cell(anchornumber+nodenumber,2);
            %0=dead, 1=live, 2=pathless, 3=critical power, nan=yet to initialize, 4=unlocalized
            db_nodestatus = ones(anchornumber+nodenumber,1);
            db_nodestatus(anchornumber+1:anchornumber+nodenumber,:)=nan;
            db_Et = zeros(anchornumber+nodenumber,timesim);
            db_Et(anchornumber+1:anchornumber+nodenumber,1:timesim)=nan;
            db_Etod = zeros(anchornumber+nodenumber,timesim);
            db_Etod(anchornumber+1:anchornumber+nodenumber,1:timesim)=nan;
            db_Etod2 = zeros(anchornumber+nodenumber,timesim);
            db_Etod2(anchornumber+1:anchornumber+nodenumber,1:timesim)=nan;
            db_Etmon = zeros(anchornumber+nodenumber,timesim);
            db_Etmon(anchornumber+1:anchornumber+nodenumber,1:timesim)=nan;
            db_Et2 = zeros(anchornumber+nodenumber,timesim);
            db_Et2(anchornumber+1:anchornumber+nodenumber,1:timesim)=nan;
            
            temp3=1;
            temp4=zeros(anchornumber,anchornumber);
            connect.g1=0;
            for j = 1 : anchornumber
                for k = 1 : anchornumber
                    if j==k
                        temp4(j,k)=inf;
                        continue;
                    end
                    temp4(j,k)=round(norm(  [anchor(j,1) anchor(j,2)]  -  [anchor(k,1) anchor(k,2)]  ),2);
                    if temp4(j,k) <= rangeAnchor
                        connect.g1(temp3,:)=j;
                        connect.g2(temp3,:)=k;
                        connect.g3(temp3,:)=temp4(j,k);
                        temp3=temp3+1;
                        db_neighbour{j,1}=[db_neighbour{j,1}; k];
                        db_neighbour{j,2}=[db_neighbour{j,2}; temp4(j,k)];
                    end
                end
            end
            if connect.g1==0
                msgbox('No anchors in range with scenario setup!','Error','error');
                error('No anchors in range with scenario setup!');
            end
            G1 = graph(connect.g1,connect.g2,connect.g3);
            for j = 1 : anchornumber
                [db_path{j,1},db_path{j,2}]=shortestpath(G1,j,sink);
            end
            
            %% MAIN SEQUENCE
            global distError
            distError=zeros(anchornumber+nodenumber,1);
            icount = 1;
            flagDeadNode = 0;   flagCriticalNode = 0;   flagRestoredNode = 0;
            
            for time = 1:1:timesim
                fprintf('>>time=%s\n',num2str(time));
                
                % check for dead node event
                for j=1:size(deadNodeList,1)
                    if (time == deadNodeList(j,2) && db_nodestatus(deadNodeList(j,1)) == 1)
                        temp1 = deadNodeList(j,1);
                        flagDeadNode = 1;
                        db_nodestatus(temp1)=0;
                        db_neighbour{temp1,1}=[];
                        db_neighbour{temp1,2}=[];
                        db_path{temp1,1}=[];
                        db_path{temp1,2}=[];
                        db_Et(temp1,time) =nan;
                        db_Etmon(temp1,time) =nan;
                        db_Etod(temp1,time) =nan;
                        db_Etod2(temp1,time) =nan;
                        db_Et2(temp1,time) =nan;
                        %fprintf('----------------------------------------------------\n');
                        fprintf('Node %s dead at time=%s (dead node event)\n',num2str(deadNodeList(j,1)),num2str(time));
                        fprintf('----------------------------------------------------\n');
                        
                    end
                end
                %check for dead or critical battery power
                if icount < nodenumber
                    for j=1:anchornumber+nodenumber
                        temp1 = 100 - db_Et(j,time) / Eo * 100; %temp1 = percent remaining power
                        %check for dead battery power
                        if temp1 <= 0 && j~=sink
                            temp2 = j; %temp2= critical/dead node
                            db_nodestatus(temp2) = 0; % 0 represents dead status in db_nodestatus
                            flagDeadNode = 1;
                            db_neighbour{temp2,1}=[];
                            db_neighbour{temp2,2}=[];
                            db_path{temp2,1}=[];
                            db_path{temp2,2}=[];
                            db_Et(temp1,time) =nan;
                            db_Etmon(temp1,time) =nan;
                            db_Etod(temp1,time) =nan;
                            db_Etod2(temp1,time) =nan;
                            db_Et2(temp1,time) =nan;
                            
                            fprintf('Node %s is Dead at time = %s! \n',num2str(temp2),num2str(time));
                            fprintf('----------------------------------------------------\n');
                        end
                        if j == sink || db_nodestatus(j) == 0 || db_nodestatus(j) == 3 %do not check for sink, dead nodes and already critical nodes
                            continue;
                        end
                        % check for critical battery power
                        if temp1 <= app.CriticalPowerEditField.Value
                            flagCriticalNode = 1;
                            temp2 = j; %temp2= critical node
                            db_nodestatus(temp2) = 3; % 3 represents critical status in db_nodestatus
                            %fprintf('----------------------------------------------------\n');
                            fprintf('Critical power detected for Node %s! (%0.2f%% at time = %s). \n',num2str(temp2),temp1,num2str(time));
                            db_path = findAlternatePath(app,db_path,db_neighbour,temp2);
                            fprintf('----------------------------------------------------\n');
                        end
                    end
                end
                
                % check for restored node
                for j=1:size(restoreNodeList,1)
                    if (time == restoreNodeList(j,2) && (db_nodestatus(restoreNodeList(j,1)) == 0 || db_nodestatus(restoreNodeList(j,1)) == 3))
                        flagRestoredNode = 1;
                        %fprintf('----------------------------------------------------\n');
                        temp1 = restoreNodeList(j,1); %temp1 = restored node
                        fprintf('Node %s restored at time=%s (restore node event)\n',num2str(temp1),num2str(time));
                        db_nodestatus(temp1)=1;
                        db_Et(temp1,time) = - wurxEnergyMonitor;
                        db_Etmon(temp1,time) = - wurxEnergyMonitor;
                        db_Etod(temp1,time) = 0;
                        db_Etod2(temp1,time) = 0;
                        db_Et2(temp1,time) = - wurxEnergyMonitor;
                        data.time = time;
                        restoredNodeLocalization(app,temp1,data);
                        fprintf('----------------------------------------------------\n');
                    end
                end
                
                if icount <= nodenumber %to simulate till time=timesim
                    if time == event(icount,1)
                        for i=icount:nodenumber+numel(loc_req)
                            newnodeID = i+anchornumber;
                            fprintf('>>(nodeID,event)=(%s,%s)[event]\n',num2str(newnodeID),num2str(event(i,1)));
                            db_nodestatus(newnodeID)=1;
                            db_Et(newnodeID,time:end)= 0;%initializing newnodeId
                            db_Et(newnodeID,time)= - wurxEnergyMonitor;%minus sign for later compasation
                            db_Etod(newnodeID,time:end)= 0;%initializing newnodeId
                            db_Etod2(newnodeID,time:end)= 0;%initializing newnodeId
                            db_Etmon(newnodeID,time:end)= 0;%initializing newnodeId
                            db_Etmon(newnodeID,time)= - wurxEnergyMonitor;%minus sign for later compasation
                            db_Et2(newnodeID,time:end)= 0;%initializing newnodeId
                            db_Et2(newnodeID,time)= - wurxEnergyMonitor;%minus sign for later compasation
                            
                            if i>nodenumber
                                fprintf('Localization request from Node %s \n',num2str(loc_req(i-nodenumber)));
                                newnode=node(loc_req(i-nodenumber)-anchornumber,:);
                            else
                                fprintf('----------------------------------------------------\n');
                                fprintf('Node %s \n',num2str(newnodeID));
                                newnode= node(i,:);
                            end
                            p2 = plot(newnode(1),newnode(2),'go','MarkerSize',3,'lineWidth',2,'MarkerFaceColor','g','HandleVisibility','off');
                            
                            %% BROADCASTING AND BROADCAST ENERGY CONSUMPTION
                            %   energy consumption for new node for broadcasting
                            nodesInRange = 0;  %counter for nodes in current rangeSearch
                            temp5 = zeros(size(db_pos,1),1);  %temp5 = flag (1=broadcast received, 0=not received yet)
                            distNoisy=zeros(size(db_pos,1),1);  %preallocating
                            for k=1:numel(rangeSearch)
                                for j=1:size(db_pos,1)
                                    if temp5(j)==1
                                        continue;
                                    end
                                    if i>nodenumber && j==loc_req(i-nodenumber)
                                        continue;
                                    end
                                    
                                    distNoisy(j,:)=distEstimate(app,norm([db_pos(j,1) db_pos(j,2)]-[newnode(1) newnode(2)]));
                                    if distNoisy(j) > rangeNode*rangeSearch(k)/100 || isnan(distNoisy(j))    %check for nodes in SearchRange
                                        distNoisy(j)= inf;
                                    else
                                        temp5(j)=1;
                                        nodesInRange=nodesInRange+1;
                                        [temp1,temp2]=energyConsume(app,distNoisy(j),packetsizeBroadcast); %wake-up receiver energy consumption for broadcast
                                        temp3=temp1+temp2;
                                        %new node broadcast energy consumption
                                        db_Et(newnodeID,time)=db_Et(newnodeID,time)+temp3;
                                        db_Etod(newnodeID,time)=db_Etod(newnodeID,time)+temp3;
                                        %neighbour broadcast energy consumption
                                        db_Et(j,time)=db_Et(j,time)+temp3;
                                        db_Etod(j,time)=db_Etod(j,time)+temp3;
                                    end
                                    if db_nodestatus(j) == 0 %check if node is dead
                                        distNoisy(j)= inf;
                                    end
                                end
                                if nodesInRange == 3 && k==numel(rangeSearch) && j==size(db_pos,1) || nodesInRange>=4
                                    %fprintf('No. of nodes in %sm range= %s \n',num2str(rangeNode*rangeSearch(k)/100),num2str(nodesInRange));
                                    break;
                                end
                            end
                            %updating neighbour list
                            [dist, nearnodes]=sort(distNoisy);
                            nodesInRange = sum(~isinf(dist));
                            nearnodes = nearnodes(1:nodesInRange,1); %nearnodes= all nodes in coverage
                            dist = dist(1:nodesInRange,1);
                            temp3=dist(1:nodesInRange,1);
                            db_neighbour{newnodeID,1}=nearnodes;
                            db_neighbour{newnodeID,2}=temp3;
                            %updating neighbour list of neighbours(adding current node in theie neighbour list)
                            for j=1:numel(nearnodes)
                                temp2 = db_neighbour{nearnodes(j),1};
                                temp2 = [temp2; newnodeID];
                                db_neighbour{nearnodes(j),1} = temp2;
                                
                                temp4 = db_neighbour{nearnodes(j),2};
                                temp4 = [temp4; temp3(j)];
                                db_neighbour{nearnodes(j),2} = temp4;
                            end
                            
                            %% LOCALIZATION
                            if nodesInRange<= 2
                                fprintf('Localization not possible! \n');
                                fprintf('----------------------------------------------------\n');
                                db_pos(newnodeID,:) = [NaN NaN];
                                db_path(newnodeID,:) = {NaN NaN};
                                db_nodestatus(newnodeID)=4; %4=unlocalized
                                distError(newnodeID,:) = NaN;
                                plot(newnode(1),newnode(2),'rx','MarkerSize',7,'lineWidth',2);
                                icount=i+1;
                                if (app.Pause1.Value)
                                    pause();
                                end
                                if (app.Pause0.Value)
                                    pause(1);
                                end
                                app.CommandwindowTextArea.Value = fileread('commandwindowtext.txt');
                                continue;
                            elseif nodesInRange==3  %trilateration
                                [x_approx,y_approx]=trilateration(app,nearnodes(1:3),dist(1:3),db_pos);
                                stddevinfo = create_stddev_cell(app);
                                stddevinfo(18,2)=num2cell(newnode(1));
                                stddevinfo(18,3)=num2cell(newnode(2));
                                stddevinfo(1,2:4)=num2cell(nearnodes(1:3)');
                                stddevinfo(3,1:3)=num2cell(nearnodes(1:3)');
                                stddevinfo(3,4:5)=num2cell([x_approx y_approx]);
                            elseif nodesInRange>=4 %multilateration with four nodes
                                [x_approx,y_approx,stddevinfo] = multilateration(app,nearnodes(1:4),dist(1:4),db_pos);
                                stddevinfo(18,2)=num2cell(newnode(1));
                                stddevinfo(18,3)=num2cell(newnode(2));
                            end
                            %LOCALIZATION ERROR CALCULATION
                            if i>nodenumber
                                distError(loc_req(i-nodenumber),:)=norm([newnode(1) newnode(2)]-[x_approx y_approx]);
                                fprintf('Localization error = %sm \n',num2str(distError(loc_req(i-nodenumber))));
                            else
                                distError(newnodeID,:)=norm([newnode(1) newnode(2)]-[x_approx y_approx]);
                                fprintf('Localization error = %sm \n',num2str(distError(newnodeID)));
                            end
                            fprintf('True Location     :(%s,%s) \nEstimated Location:(%s,%s)\n',num2str(newnode(1)),num2str(newnode(2)),num2str(x_approx),num2str(y_approx));
                            
                            %% FINDING PATH TO SINK
                            distNoisy2=zeros(size(db_pos,1),1);
                            for k=1:numel(rangeSearch)
                                for j=1:size(db_pos,1)
                                    distNoisy2(j,:)=distEstimate(app,norm([db_pos(j,1) db_pos(j,2)]-[x_approx y_approx]));
                                    if db_nodestatus(j) == 0 || distNoisy2(j) > rangeNode*rangeSearch(k)/100 || isnan(distNoisy2(j))    %check for nodes in SearchRange
                                        distNoisy2(j)= inf;
                                    end
                                end
                            end
                            for j=1:size(db_pos,1)
                                if db_nodestatus(j) == 2 %check if node is pathless
                                    distNoisy2(j)= inf;
                                end
                            end
                            [temp1, temp2]=sort(distNoisy2);
                            temp3 = sum(~isinf(temp1));
                            temp1 = temp1(1:temp3);
                            temp2=temp2(1:temp3,1); %temp2= all nodes in coverage
                            pathdistance=zeros(numel(temp2),1);    %path distances of near nodes, temp2 = nearnodes without pathless nodes
                            for j=1:numel(temp2)
                                pathdistance(j)=db_path{temp2(j),2};
                            end
                            pathdistance=pathdistance + temp1(1:temp3);
                            shortpath=db_path{(temp2(pathdistance==min(pathdistance))),1};
                            pathdistance=pathdistance(pathdistance==min(pathdistance)); %shortest path distance
                            shortpath=[newnodeID shortpath];   %shortest path to sink
                            fprintf('Path to Sink: [ %s ] \n',num2str(shortpath));
                            
                            %check for path validity
                            deadNodeDetected = 0;
                            for j=2:size(shortpath,2) %start from j=2 as 1st node in path is the new node itself
                                if db_nodestatus(shortpath(j)) == 0
                                    deadnode = shortpath(j); % shortpath(j)=dead node
                                    if deadnode == sink
                                        continue;
                                    end
                                    deadNodeDetected = 1;
                                    fprintf('Node %s is dead in this path! \n',num2str(deadnode));
                                    prevNode = shortpath(j-1); % shortpath(j-1)=previous node of dead node
                                    temp2 = db_neighbour{prevNode,1};
                                    temp2 = temp2(temp2~=deadnode);
                                    temp2 = temp2(temp2~=(newnodeID));
                                    temp3 = zeros(size(temp2,1),1);  %sink-path distances of neighbours
                                    for k=1:size(temp2,1)
                                        temp3(k) = db_path{temp2(k),2};
                                    end
                                    [temp4,temp5] = sort(temp3);
                                    temp6 = temp2(temp5); %sorted neighbour list wrt low to high path distance
                                    prevNodeUpdatedPath = 0;
                                    for k=1:size(temp6,1)
                                        temp7=db_path{temp6(k),1};
                                        for m=1:size(temp7,2)
                                            if temp7(m) == deadnode
                                                break;
                                            end
                                            if temp7(m) ~= deadnode && m == size(temp7,2)
                                                prevNodeUpdatedPath = temp7;
                                                prevNodeUpdatedPathDistance = temp4(k);
                                                break;
                                            end
                                        end
                                        if prevNodeUpdatedPath ~= 0
                                            break;
                                        end
                                    end
                                    temp2 = shortpath(1:find(shortpath == prevNode));
                                    shortpath = [temp2 prevNodeUpdatedPath];
                                    prevNodeUpdatedPath = [prevNode prevNodeUpdatedPath];
                                    temp10=db_neighbour{prevNode,1};
                                    temp11=db_neighbour{prevNode,2};
                                    temp12=temp11(temp10 == prevNodeUpdatedPath(2));
                                    prevNodeUpdatedPathDistance = prevNodeUpdatedPathDistance + temp12;
                                    fprintf('Alternate path: [ %s ] \n',num2str(shortpath));
                                end
                            end
                            %% UPDATING DATABASE
                            approxnewnode =[ x_approx y_approx ];
                            if i>nodenumber
                                db_pos(loc_req(i-nodenumber),:) = approxnewnode;
                                db_stddev{loc_req(i-nodenumber)}=stddevinfo;
                                db_path(loc_req(i-nodenumber),1)={shortpath};
                                db_path(loc_req(i-nodenumber),2)={pathdistance};
                            else
                                db_pos = [db_pos; approxnewnode]; %#ok<*AGROW>
                                db_stddev{newnodeID}=stddevinfo;
                                db_path(newnodeID,1)={shortpath};
                                db_path(newnodeID,2)={pathdistance};
                                
                                if deadNodeDetected == 1 %updating the prev node of dead node
                                    db_path(prevNode,1)={prevNodeUpdatedPath};
                                    db_path(prevNode,2)={prevNodeUpdatedPathDistance};
                                end
                            end
                            
                            %updating dead sink-paths
                            if deadNodeDetected == 1
                                fprintf('. . . . . . . . . . . . . . . . . . .\n');
                                fprintf('Updating path database: Node %s is dead. \n',num2str(deadnode));
                                db_path = findAlternatePath(app,db_path,db_neighbour,deadnode);
                            end
                            fprintf('----------------------------------------------------\n');
                            
                            %updating g1,g2,g3 (this part is excludable, only for connection demonstration purpose)
                            temp1=norm([db_pos(nearnodes(1),1) db_pos(nearnodes(1),2)]-[newnode(1) newnode(2)]);
                            temp2=norm([db_pos(nearnodes(2),1) db_pos(nearnodes(2),2)]-[newnode(1) newnode(2)]);
                            temp3=norm([db_pos(nearnodes(3),1) db_pos(nearnodes(3),2)]-[newnode(1) newnode(2)]);
                            if nodesInRange == 4
                                temp4=norm([db_pos(nearnodes(4),1) db_pos(nearnodes(4),2)]-[newnode(1) newnode(2)]);
                                connect.g1=[connect.g1;nearnodes(1);nearnodes(2);nearnodes(3);nearnodes(4)];
                                connect.g2=[connect.g2;newnodeID;newnodeID;newnodeID;newnodeID];
                                connect.g3=[connect.g3;temp1;temp2;temp3;temp4];
                            else
                                connect.g1=[connect.g1;nearnodes(1);nearnodes(2);nearnodes(3)];
                                connect.g2=[connect.g2;newnodeID;newnodeID;newnodeID];
                                connect.g3=[connect.g3;temp1;temp2;temp3];
                            end
                            
                            %% ENERGY CONSUMPTION CALCULATION
                            %   energy consumption for new node for communicating near nodes
                            for j=1:numel(nearnodes)
                                [temp1,temp2]=energyConsume(app,dist(j),packetsizeWakeup); %wake-up receiver energy consumption
                                [~,temp3]=energyConsume(app,dist(j),packetsizeData); %data reception energy consumption
                                temp3=temp1+temp2+temp3;
                                db_Et(newnodeID,time)=db_Et(newnodeID,time)+temp3;
                                db_Etod(newnodeID,time)=db_Etod(newnodeID,time)+temp3;
                            end
                            %   energy consumption for each near node to communicate with new node
                            for j=1:numel(nearnodes)
                                [temp1,temp2]=energyConsume(app,dist(j),packetsizeWakeup); %wake-up receiver energy consumption
                                [temp3,~]=energyConsume(app,dist(j),packetsizeData); %data transmission energy consumption
                                temp3=temp1+temp2+temp3;
                                db_Et(nearnodes(j),time)=db_Et(nearnodes(j),time)+temp3;
                                db_Etod(nearnodes(j),time)=db_Etod(nearnodes(j),time)+temp3;
                            end
                            %   energy consumption for path nodes
                            temp5=db_path{newnodeID,1};  %loading path from database
                            if ~isempty(temp5)
                                temp4=zeros(numel(temp5)-1,1);  %temp4 = distance between consecutive path nodes
                                for j=1:numel(temp4)
                                    temp4(j,:)=(norm([db_pos(temp5(j),1) db_pos(temp5(j),2)]-[db_pos(temp5(j+1),1) db_pos(temp5(j+1),2)]));
                                end
                                for j=1:numel(temp5)
                                    if j==1 %(first node, new node itself)
                                        [temp1,temp2]=energyConsume(app,temp4(j),packetsizeWakeup); %wake-up receiver energy consumption
                                        [temp3,~]=energyConsume(app,temp4(j),packetsizeData); %data transmission energy consumption
                                        temp3=temp1+temp2+temp3;
                                        db_Et(temp5(j),time)=db_Et(temp5(j),time)+temp3;
                                        db_Etod(temp5(j),time)=db_Etod(temp5(j),time)+temp3;
                                    elseif j==numel(temp5)  %(last node, sink)
                                        [temp1,temp2]=energyConsume(app,temp4(j-1),packetsizeWakeup); %wake-up receiver energy consumption
                                        [~,temp3]=energyConsume(app,temp4(j-1),packetsizeData); %data reception energy consumption
                                        temp3=temp1+temp2+temp3;
                                        db_Et(temp5(j),time)=db_Et(temp5(j),time)+temp3;
                                        db_Etod(temp5(j),time)=db_Etod(temp5(j),time)+temp3;
                                    else   %(intermediate path nodess)
                                        [temp1,temp2]=energyConsume(app,temp4(j-1),packetsizeWakeup); %wake-up receiver energy consumption
                                        [~,temp3]=energyConsume(app,temp4(j-1),packetsizeData); %data reception energy consumption
                                        temp3=temp1+temp2+temp3;
                                        db_Et(temp5(j),time)=db_Et(temp5(j),time)+temp3;
                                        db_Etod(temp5(j),time)=db_Etod(temp5(j),time)+temp3;
                                        
                                        [temp1,temp2]=energyConsume(app,temp4(j),packetsizeWakeup); %wake-up receiver energy consumption
                                        [temp3,~]=energyConsume(app,temp4(j),packetsizeData); %data transmission energy consumption
                                        temp3=temp1+temp2+temp3;
                                        db_Et(temp5(j),time)=db_Et(temp5(j),time)+temp3;
                                        db_Etod(temp5(j),time)=db_Etod(temp5(j),time)+temp3;
                                        
                                    end
                                end
                            end
                            
                            %%  PLOT & LEGEND
                            for j=1:size(db_nodestatus,1)
                                if db_nodestatus(j) == 0 && j~=sink
                                    if j <= anchornumber
                                        p8 = plot (db_pos(j,1),db_pos(j,2),'r^','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','r');
                                    else
                                        p6 = plot (db_pos(j,1),db_pos(j,2),'ro','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','r');
                                    end
                                end
                                if db_nodestatus(j) == 3  && j~=sink
                                    if j <= anchornumber
                                        p9 = plot (db_pos(j,1),db_pos(j,2),'^','Color','#EDB120','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','#EDB120');
                                    else
                                        p7 = plot (db_pos(j,1),db_pos(j,2),'+','Color','#EDB120','MarkerSize',5,'lineWidth',2,'MarkerFaceColor','#EDB120');
                                    end
                                end
                            end
                            
                            if isnan(x_approx) || isnan(y_approx)
                                plot(newnode(1),newnode(2),'rx','MarkerSize',7,'lineWidth',2);
                                text(newnode(1)+0.5,newnode(2)+0.5, num2str(newnodeID));
                            else
                                p2 = plot(newnode(1),newnode(2),'go','MarkerSize',3,'lineWidth',2,'MarkerFaceColor','g');
                            end
                            if i>nodenumber
                                p5 = plot(approxnewnode(1),approxnewnode(2),'c+','MarkerSize',7,'lineWidth',2); %plot updated approx location of new node
                                line([newnode(1) approxnewnode(1)],[newnode(2) approxnewnode(2)],'color','c');  %plot line connecting true and updated approx
                            else
                                p3 = plot(approxnewnode(1),approxnewnode(2),'m+','MarkerSize',6,'lineWidth',2); %plot approx location of node
                                text(approxnewnode(1)+0.5,approxnewnode(2)+0.5, num2str(newnodeID));   %naming the approx node
                                line([newnode(1) approxnewnode(1)],[newnode(2) approxnewnode(2)],'color','m');  %plot line connecting true and approx
                            end
                            
                            %legend
                            if exist('p6','var') && exist('p7','var') && exist('p8','var')
                                legend([p0 p1 p2 p3,p6,p7,p8],{'Sink','Primary anchor','True location','Estimated location','Dead node','Critical node','Dead anchor'})
                            elseif exist('p6','var') && exist('p7','var') && exist('p9','var')
                                legend([p0 p1 p2 p3,p6,p7,p9],{'Sink','Primary anchor','True location','Estimated location','Dead node','Critical node','Critical anchor'})
                            elseif exist('p6','var') && exist('p8','var') && exist('p9','var')
                                legend([p0 p1 p2 p3,p6,p8,p9],{'Sink','Primary anchor','True location','Estimated location','Dead node','Dead anchor','Critical anchor'})
                            elseif exist('p7','var') && exist('p8','var') && exist('p9','var')
                                legend([p0 p1 p2 p3,p7,p8,p9],{'Sink','Primary anchor','True location','Estimated location','Critical node','Dead anchor','Critical anchor'})
                            elseif exist('p6','var') && exist('p7','var')
                                legend([p0 p1 p2 p3,p6,p7],{'Sink','Primary anchor','True location','Estimated location','Dead node','Critical node'})
                            elseif exist('p6','var') && exist('p8','var')
                                legend([p0 p1 p2 p3,p6,p8],{'Sink','Primary anchor','True location','Estimated location','Dead node','Dead anchor'})
                            elseif exist('p6','var') && exist('p9','var')
                                legend([p0 p1 p2 p3,p6,p9],{'Sink','Primary anchor','True location','Estimated location','Dead node','Critical anchor'})
                            elseif exist('p7','var') && exist('p8','var')
                                legend([p0 p1 p2 p3,p7,p8],{'Sink','Primary anchor','True location','Estimated location','Critical node','Dead anchor'})
                            elseif exist('p7','var') && exist('p9','var')
                                legend([p0 p1 p2 p3,p7,p9],{'Sink','Primary anchor','True location','Estimated location','Critical node','Critical anchor'})
                            elseif exist('p8','var') && exist('p9','var')
                                legend([p0 p1 p2 p3,p8,p9],{'Sink','Primary anchor','True location','Estimated location','Dead anchor','Critical anchor'})
                            elseif exist('p6','var')
                                legend([p0 p1 p2 p3,p6],{'Sink','Primary anchor','True location','Estimated location','Dead node'})
                            elseif exist('p7','var')
                                legend([p0 p1 p2 p3,p7],{'Sink','Primary anchor','True location','Estimated location','CritiCritical anchorl node'})
                            elseif exist('p8','var')
                                legend([p0 p1 p2 p3,p8],{'Sink','Primary anchor','True location','Estimated location','Dead anchor'})
                            elseif exist('p9','var')
                                legend([p0 p1 p2 p3,p9],{'Sink','Primary anchor','True location','Estimated location','Critical anchor'})
                            elseif exist('p5','var')
                                legend([p0 p1 p2 p3 p5],{'Sink','Primary anchor','True location','Estimated location','Updated location'})
                            elseif exist('p3','var')
                                legend([p0 p1 p2 p3],{'Sink','Primary anchor','True location','Estimated location'})
                            end
                            for j=1:numel(db_nodestatus)
                                if (db_nodestatus(j)==4)
                                    temp1= j-anchornumber;
                                    plot(node(temp1,1),node(temp1,2),'rx','MarkerSize',7,'lineWidth',2,'DisplayName','Unlocalized node');
                                    break;
                                else
                                    clearvars p4;
                                end
                            end
                            if(app.Pause2.Value && flagDeadNode)
                                pause();
                                flagDeadNode = 0;
                            end
                            if(app.Pause3.Value && flagCriticalNode)
                                pause();
                                flagCriticalNode = 0;
                            end
                            if(app.Pause4.Value && flagRestoredNode)
                                pause();
                                flagRestoredNode = 0;
                            end
                            
                            if(app.Pause0.Value && flagDeadNode)
                                pause(1);
                                flagDeadNode = 0;
                            end
                            if(app.Pause0.Value && flagCriticalNode)
                                pause(1);
                                flagCriticalNode = 0;
                            end
                            if(app.Pause0.Value && flagRestoredNode)
                                pause(1);
                                flagRestoredNode = 0;
                            end
                            
                            if event(icount+1) == event(icount)
                                icount=icount+1;
                                continue
                            else
                                break
                            end
                        end
                        icount=i+1;
                    end
                end
                db_Et(:,time) = db_Et(:,time)+wurxEnergyMonitor;
                if time < timesim
                    db_Et(:,time+1) = db_Et(:,time);
                end
                db_Etmon(:,time) = db_Etmon(:,time)+wurxEnergyMonitor;
                if time < timesim
                    db_Etmon(:,time+1) = db_Etmon(:,time);
                end
                db_Etod2(:,time) = db_Etod2(:,time) + db_Etod(:,time);
                if time < timesim
                    db_Etod2(:,time+1) = db_Etod2(:,time);
                end
                db_Et2(:,time) = db_Etmon(:,time)+db_Etod2(:,time);
                
                db_all = {};
                temp4 = [db_pos(1:anchornumber,:); node]; %true positions of all nodes
                for j=1:size(db_pos,1)
                    db_all{j,1} = strcat('(',mat2str(round(temp4(j,1),2)),' , ',mat2str(round(temp4(j,2),2)),')');
                    db_all{j,2} = strcat('(',mat2str(round(db_pos(j,1),2)),' , ',mat2str(round(db_pos(j,2),2)),')');
                    db_all{j,3} = mat2str(round(distError(j),2));
                    db_all{j,4} = mat2str(db_path{j,1});
                    db_all{j,5} = mat2str(round(db_path{j,2},2));
                    db_all{j,6} = mat2str(db_neighbour{j,1}.');
                    if db_nodestatus(j) == 1
                        db_all{j,7} = 'online';
                    elseif db_nodestatus(j) == 0
                        db_all{j,7} = 'dead';
                    elseif db_nodestatus(j) == 3
                        db_all{j,7} = 'critical';
                    elseif db_nodestatus(j) == 4
                        db_all{j,7} = 'unlocalized';
                    end
                end
                app.DatabaseTable.Data = db_all;
                app.CommandwindowTextArea.Value = fileread('commandwindowtext.txt');
                if (app.Pause1.Value)
                    pause();
                end
                if (app.Pause0.Value)
                    pause(1);
                end
            end
            %% PRINT RESULTS
            app.EtTable.Data = db_Et;
            app.EtodTable.Data = db_Etod;
            
            app.CommandwindowTextArea.Value = fileread('commandwindowtext.txt');
            diary off; clc;
            if isfile ('summary.txt')
                delete('summary.txt')
            end
            diary ('summary.txt')
            app.SummaryTextArea.Value = fileread('summary.txt');
            %fprintf('----------------------------------------------------\n');
            fprintf('Network size: %sm x %sm \n',num2str(networkSize(1)),num2str(networkSize(2)));
            fprintf('Anchor node range = %sm\n',num2str(rangeAnchor));
            fprintf('Normal node range = %sm\n',num2str(rangeNode));
            fprintf('Total number of anchor nodes = %s \n',num2str(anchornumber));
            fprintf('Total number of normal nodes = %s \n',num2str(size(node,1)));
            fprintf('Total number of unlocalized nodes = %s \n',num2str(sum(isnan(db_pos(:,1)+db_pos(:,2)))));
            fprintf('Avg. localization error = %sm \n',num2str(mean(distError(anchornumber+1:size(distError,1)),'omitnan')));
            Econsume=db_Et(:,end);
            temp1=Econsume;
            temp1(sink)=0;  %to exclude sink current consumption for calculation
            EconsumeNoSink=temp1;
            fprintf('Avg. energy consumption = %s J (with sink) \n',num2str(mean(nonzeros(Econsume),'omitnan')));
            fprintf('Avg. energy consumption = %s J (no sink) \n',num2str(mean(nonzeros(EconsumeNoSink),'omitnan')));
            fprintf('----------------------------------------------------\n');
            app.SummaryTextArea.Value = fileread('summary.txt');
            diary off;
            
            %%GRAPHS
            if (app.LocalizationerrorCheckBox.Value || app.ShowallgraphsCheckBox.Value)
                figure('Name','Localization error (m)','NumberTitle','off');
                hold on; grid on; box on;
                title(['Avg. Localization error = ',num2str(mean(distError(anchornumber+1:size(distError,1)),'omitnan')),' m']);
                xlabel('Node ID')
                ylabel('Localization error (m)')
                bar((anchornumber+1:anchornumber+nodenumber),distError(anchornumber+1:size(distError,1)));
                
                if app.wrtdeploymentareaCheckBox.Value
                    figure('Name','Localization error wrt Deployment area','NumberTitle','off');
                    hold on; grid on; box on;
                    temp1 = distError(anchornumber+1:size(distError,1));
                    if strcmp(app.AnchordeploymentDropDown.Value,'Hexagon vertex, center sink')
                        temp3 = 3*sqrt(3)/2*app.SidemEditField.Value; %area of hexagon
                        temp2 = temp1/temp3*100;
                    else
                        temp2 = temp1 /(networkSize(1) * networkSize(2))*100;
                    end
                    title(['Avg. Localization error wrt Deployment area = ',num2str(mean(temp2,'omitnan')),' m^-1']);
                    xlabel('Node ID')
                    ylabel('Localization error (m^-1)')
                    bar((anchornumber+1:anchornumber+nodenumber),temp2);
                end
            end
            
            if (app.EnergyconsumptionwrtnodeIDCheckBox.Value || app.ShowallgraphsCheckBox.Value)
                figure('Name','Energy consumption wrt Node ID','NumberTitle','off');
                hold on; grid on; box on;
                xlabel('Node ID')
                title('Energy consumption wrt Node ID');
                
                %xticks(1:1:anchornumber+nodenumber)
                if strcmp(app.SwitchEnergyConsumption.Value,'Joules')
                    ylabel('Energy consumption (J)')
                    bar(1:anchornumber+nodenumber,Econsume)
                else
                    ylabel('Energy consumption (%)')
                    temp1 = Econsume / Eo * 100;
                    bar(1:anchornumber+nodenumber,temp1)
                end
            end
            
            if (app.EnergyconsumptionwrttimeCheckBox.Value || app.ShowallgraphsCheckBox.Value)
                if app.AllnodesindividualCheckBox.Value
                    figure('Name','Energy consumption wrt Time: All nodes','NumberTitle','off');
                    hold on; grid on; box on;
                    title('Energy consumption wrt Time: All nodes');
                    xlabel('Time (sec)')
                    ylabel('Energy consumption(J)')
                    xlim([0 timesim]);
                    temp2 = 1:anchornumber+nodenumber;
                    for j=1:numel(temp2)
                        plot(1:timesim,db_Et(temp2(j),:),'.--','MarkerSize',10,'DisplayName',num2str(temp2(j)));
                    end
                    legend('Location','northwest');
                end
                if app.NetworkAvgenergyconsmpCheckBox.Value
                    figure('Name','Energy consumption wrt Time: Network','NumberTitle','off');
                    hold on; grid on; box on;
                    title('Energy consumption wrt Time: Network');
                    xlabel('Time (sec)')
                    ylabel('Energy consumption(J)')
                    xlim([0 timesim]);
                    temp3 = sum(db_Et,'omitnan');
                    plot(1:timesim,temp3,'LineWidth',2);
                end
                if app.AnchorsindividualCheckBox.Value
                    figure('Name','Energy consumption wrt Time: Anchors','NumberTitle','off');
                    hold on; grid on; box on;
                    title('Energy consumption wrt Time: Anchors');
                    xlabel('Time (sec)')
                    ylabel('Energy consumption(J)')
                    xlim([0 timesim]); xticks(0:timesim/10:timesim);
                    temp2 = 1:anchornumber;
                    for j=1:numel(temp2)
                        temp3 = db_Et(temp2(j),:);
                        temp4 = 0:timesim/10:timesim;% temp4 specifies the x-coordinate values
                        temp4(1)=1;
                        plot(temp4,temp3(temp4),'.--','MarkerSize',15,'DisplayName',num2str(temp2(j)));
                    end
                    legend('Location','northwest');
                end
                if app.NodesCheckBox.Value
                    figure('Name','Energy consumption wrt Time: Normal Nodes','NumberTitle','off');
                    hold on; grid on; box on;
                    title('Energy consumption wrt Time: Normal Nodes');
                    xlabel('Time (sec)')
                    ylabel('Energy consumption(J)')
                    xlim([0 timesim]);
                    temp2 = str2num(app.EnergyconsumptionofnodeTextField.Value); %#ok<*ST2NM>
                    if isempty(temp2)
                        temp2 = anchornumber+1:anchornumber+nodenumber;
                        for j=1:numel(temp2)
                            plot(1:timesim,db_Et(temp2(j),:),'.--','MarkerSize',10,'DisplayName',num2str(temp2(j)));
                        end
                    else
                        for j=1:numel(temp2)
                            plot(1:timesim,db_Et(temp2(j),:),'.--','MarkerSize',10,'DisplayName',num2str(temp2(j)));
                        end
                    end
                    legend('Location','northwest');
                end
            end
            
            if (app.StackedenergyconsumptionCheckBox.Value || app.ShowallgraphsCheckBox.Value)
                if app.wrttimeCheckBox.Value
                    temp5 = str2num(app.StackednergyconsumptionTextField.Value); %#ok<*ST2NM>
                    for j=1:numel(temp5)
                        temp6 = strcat('Energy consumption (stacked, wrt time), Node : ',num2str(temp5(j)));
                        figure('Name',temp6,'NumberTitle','off');
                        hold on; grid on; box on;
                        title(temp6);
                        xlabel('Time (sec)')
                        ylabel('Energy consumption(J)')
                        temp2=db_Etod2(temp5(j),:);
                        temp1=db_Etmon(temp5(j),:);
                        temp3=[temp1;temp2];
                        bar(1:timesim,temp3,'stacked')
                    end
                    legend('wake-up rx monitoring','on-demand (active)','location','northwest')
                end
                if app.pertimestampCheckBox.Value
                    temp5 = str2num(app.StackednergyconsumptionTextField.Value); %#ok<*ST2NM>
                    for j=1:numel(temp5)
                        temp6 = strcat('Energy consumption (stacked, per time stamp), Node : ',num2str(temp5(j)));
                        figure('Name',temp6,'NumberTitle','off');
                        hold on; grid on; box on;
                        title(temp6);
                        xlabel('Time (sec)')
                        ylabel('Energy consumption(J)')
                        temp4 = 0 * db_Etmon; %temp4 is energy monitor per time stamp
                        for m = 1:anchornumber+nodenumber
                            for n= 1:timesim
                                if isnan(db_Etmon(m,n))
                                    temp4(m,n) = nan;
                                elseif db_Etmon(m,n) == 0
                                    temp4(m,n) = 0;
                                else
                                    temp4(m,n) = 1;
                                end
                            end
                        end
                        temp4 = wurxEnergyMonitor * temp4;
                        temp2=db_Etod(temp5(j),:);
                        temp1=temp4(temp5(j),:);
                        temp3=[temp1;temp2];
                        bar(1:timesim,temp3,'stacked')
                    end
                    legend('wake-up rx monitoring','on-demand (active)','location','northeast')
                end
            end
            
            app.CommandwindowTextArea.Value = fileread('commandwindowtext.txt');
            diary off;
            
            db_all = {};
            temp4 = [db_pos(1:anchornumber,:); node]; %true positions of all nodes
            for j=1:size(db_pos,1)
                db_all{j,1} = strcat('(',mat2str(round(temp4(j,1),2)),' , ',mat2str(round(temp4(j,2),2)),')');
                db_all{j,2} = strcat('(',mat2str(round(db_pos(j,1),2)),' , ',mat2str(round(db_pos(j,2),2)),')');
                db_all{j,3} = mat2str(round(distError(j),2));
                db_all{j,4} = mat2str(db_path{j,1});
                db_all{j,5} = mat2str(round(db_path{j,2},2));
                db_all{j,6} = mat2str(db_neighbour{j,1}.');
                if db_nodestatus(j) == 1
                    db_all{j,7} = 'online';
                elseif db_nodestatus(j) == 0
                    db_all{j,7} = 'dead';
                elseif db_nodestatus(j) == 3
                    db_all{j,7} = 'critical';
                elseif db_nodestatus(j) == 4
                    db_all{j,7} = 'unlocalized';
                end
            end
            app.DatabaseTable.Data = db_all;
            temp1 = uistyle('FontColor','b');
            temp2 = uistyle('FontColor','m');
            temp3 = uistyle('FontColor','#0B0');
            temp4 = uistyle('FontColor','r');
            temp5 = uistyle('FontColor','#EDB120');
            temp6 = uistyle('FontColor','#D95319');
            app.DatabaseTable.BackgroundColor = [1 1 1];
            addStyle(app.DatabaseTable,temp1,'row',[1:anchornumber]);
            addStyle(app.DatabaseTable,temp2,'row',[1+anchornumber:anchornumber+nodenumber]);
            for j=1:anchornumber+nodenumber
                if strcmp(app.DatabaseTable.Data{j,7},'online')
                    addStyle(app.DatabaseTable,temp3,'cell',[j 7]);
                elseif strcmp(app.DatabaseTable.Data{j,7},'dead')
                    addStyle(app.DatabaseTable,temp4,'cell',[j 7]);
                elseif strcmp(app.DatabaseTable.Data{j,7},'critical')
                    addStyle(app.DatabaseTable,temp5,'cell',[j 7]);
                elseif strcmp(app.DatabaseTable.Data{j,7},'unlocalized')
                    addStyle(app.DatabaseTable,temp6,'cell',[j 7]);
                end
            end
            app.prop_distError = distError;
            app.prop_anchornumber = anchornumber;
            temp3 = sum(db_Et,'omitnan');
            app.prop_NetworkEnergyConsumption = temp3;
        end

        % Button pushed function: AddtodeadnodesButton
        function AddtodeadnodesButtonPushed(app, event)
            temp1 = app.NodeIDEditField.Value;
            temp2 = app.NodeEventEditField.Value;
            temp3 = [temp1 temp2];
            app.mydeadnodetable = [app.mydeadnodetable; temp3];
            app.DeadNodesTable.Data = [app.mydeadnodetable];
        end

        % Button pushed function: AddtorestorednodesButton
        function AddtorestorednodesButtonPushed(app, event)
            temp1 = app.NodeIDEditField.Value;
            temp2 = app.NodeEventEditField.Value;
            temp3 = [temp1 temp2];
            app.myrestorenodetable = [app.myrestorenodetable; temp3];
            app.RestoredNodesTable.Data = [app.myrestorenodetable];
        end

        % Button pushed function: ClearcacheButton
        function ClearcacheButtonPushed(app, event)
            app.mydeadnodetable = [];
            app.myrestorenodetable = [];
            app.DeadNodesTable.Data=[];
            app.RestoredNodesTable.Data = [];
            app.EventTable.Data = [];
            app.ManualeventEditField.Value = '';
            app.CommandwindowTextArea.Value = '';
            app.SummaryTextArea.Value = '';
            app.DatabaseTable.Data = [];
            app.EtTable.Data = [];
            app.EtodTable.Data = [];
            app.EnergyconsumptionofnodeTextField.Value = '';
            app.StackednergyconsumptionTextField.Value = '';
            clf;   clc; close all;
            evalin('base','clear all');
            diary off;
            if isfile ('commandwindowtext.txt')
                delete('commandwindowtext.txt')
            end
            if isfile ('summary.txt')
                delete('summary.txt')
            end
        end

        % Button pushed function: GeneratenodeeventsButton
        function GeneratenodeeventsButtonPushed(app, event)
            app.flag_generateEvent = 1;
            [networkSize,anchor,anchornumber,sink,node,rangeAnchor,rangeNode,p0,p1]=Scenario(app);
            app.anchornumber.Value = anchornumber;
            nodenumber = app.NodeNumber.Value;
            timesim=app.SimulationTimesecEditField.Value;
            if (app.ManualEvent.Value)
                event = str2num(app.ManualeventEditField.Value);
                event = event';
                if (isempty(event))
                    msgbox('Enter events in Manual text field!','Error','error');
                    error('Enter events in Manual text field!');
                elseif (numel(event) ~= nodenumber)
                    msgbox('Node number and number of events are mismatched!','Error','error');
                    error('Node number and number of events are mismatched!');
                end
                
                for j = 1:numel(event)
                    if event(j)>timesim
                        msgbox('Event after simulation time detected!','Error','error');
                        error('Event after simulation time detected!');
                    end
                end
                event(:,2)=anchornumber+1:anchornumber+nodenumber;
                app.EventTable.Data = event;
            elseif(app.RandomEvent.Value)
                %event=sort(round(timesim.*rand(nodenumber,1),0)); %auto event setup
                event = sort(randi([1 timesim],nodenumber,1));
                event(:,2)=anchornumber+1:anchornumber+nodenumber;
                app.EventTable.Data = event;
            end
        end

        % Button pushed function: ClearDeadTableButton
        function ClearDeadTableButtonPushed(app, event)
            app.mydeadnodetable = [];
            app.DeadNodesTable.Data = [];
        end

        % Button pushed function: ClearRestoredTableButton
        function ClearRestoredTableButtonPushed(app, event)
            app.myrestorenodetable = [];
            app.RestoredNodesTable.Data = [];
        end

        % Value changed function: ShowallgraphsCheckBox
        function ShowallgraphsCheckBoxValueChanged(app, event)
            if(app.ShowallgraphsCheckBox.Value)
                app.LocalizationerrorCheckBox.Value = 1;
                app.EnergyconsumptionwrtnodeIDCheckBox.Value = 1;
                app.EnergyconsumptionwrttimeCheckBox.Value = 1;
                app.StackedenergyconsumptionCheckBox.Value = 1;
                app.AllnodesindividualCheckBox.Value=1;
                app.wrttimeCheckBox.Value=1;
            else
                app.LocalizationerrorCheckBox.Value = 0;
                app.EnergyconsumptionwrtnodeIDCheckBox.Value = 0;
                app.EnergyconsumptionwrttimeCheckBox.Value = 0;
                app.StackedenergyconsumptionCheckBox.Value = 0;
                app.AllnodesindividualCheckBox.Value=0;
                app.wrttimeCheckBox.Value=0;
            end
        end

        % Button pushed function: ClearallButton
        function ClearallButtonPushed(app, event)
            app.NetworksizeEditField.Value = '';
            app.NodeNumber.Value = 0;
            app.RangeAnchor.Value = 0;
            app.RangeNode.Value = 0;
            app.Eo.Value = 0;
            app.WuRxEnergyCosumpWEditField.Value = 0;
            app.CriticalPowerEditField.Value = 0;
            app.WakeupbyteEditField.Value = 0;
            app.BroadcastbyteEditField.Value = 0;
            app.DataPacketEditField.Value = 0;
            app.SimulationTimesecEditField.Value = 0;
            app.ManualeventEditField.Value = '';
            app.NodeIDEditField.Value = 0;
            app.NodeEventEditField.Value = 0;
            app.EnergyconsumptionofnodeTextField.Value = '';
            app.mydeadnodetable = [];
            app.myrestorenodetable = [];
            app.DeadNodesTable.Data=[];
            app.RestoredNodesTable.Data = [];
            app.EventTable.Data = [];
            app.ManualeventEditField.Value = '';
            app.CommandwindowTextArea.Value = '';
            app.SummaryTextArea.Value = '';
            app.DatabaseTable.Data = [];
            app.EtTable.Data = [];
            app.EtodTable.Data = [];
            app.EnergyconsumptionofnodeTextField.Value = '';
            app.StackednergyconsumptionTextField.Value = '';
            if isfile ('myscenario1.mat')
                delete('myscenario1.mat')
            end
            if isfile ('myscenario2.mat')
                delete('myscenario2.mat')
            end
            if isfile ('myscenario3.mat')
                delete('myscenario3.mat')
            end
            clf;   clc; close all;
            evalin('base','clear all');
            diary off;
            if isfile ('commandwindowtext.txt')
                delete('commandwindowtext.txt')
            end
            if isfile ('summary.txt')
                delete('summary.txt')
            end
        end

        % Button pushed function: SaveEventsTable
        function SaveEventsTableButtonPushed(app, event)
            if isfile ('savedevents.mat')
                delete('savedevents.mat')
            end
            event = app.EventTable.Data;
            save('savedevents.mat','event');
        end

        % Button pushed function: LoadEventsTable
        function LoadEventsTableButtonPushed(app, event)
            load('savedevents.mat','event');
            app.EventTable.Data = event;
        end

        % Value changed function: AnchordeploymentDropDown
        function AnchordeploymentDropDownValueChanged(app, event)
            app.EventTable.Data = [];
            temp1 = app.AnchordeploymentDropDown.Value;
            if (strcmp(temp1,'Square Grid') || strcmp(temp1,'Square Random'))
                %app.RangeAnchor.Visible = 'on';
                %app.RangeAnchor.HandleVisibility = 'on';
                app.SidemEditField.Visible = 'off';
            else
                %app.RangeAnchor.Visible = 'off';
                %app.RangeAnchor.HandleVisibility = 'on';
                app.SidemEditField.Visible = 'on';
            end
        end

        % Value changed function: NodeNumber
        function NodeNumberValueChanged(app, event)
            app.EventTable.Data = [];
        end

        % Value changed function: NetworksizeEditField
        function NetworksizeEditFieldValueChanged(app, event)
            app.EventTable.Data = [];
        end

        % Value changed function: RangeAnchor
        function RangeAnchorValueChanged(app, event)
            app.EventTable.Data = [];
        end

        % Value changed function: SimulationTimesecEditField
        function SimulationTimesecEditFieldValueChanged(app, event)
            app.EventTable.Data = [];
        end

        % Button pushed function: CreatescenarioButton
        function CreatescenarioButtonPushed(app, event)
            app.flag_generateEvent = 0;
            [networkSize,anchor,anchornumber,sink,node,rangeAnchor,rangeNode,p0,p1]=Scenario(app);
            app.anchornumber.Value = anchornumber;
        end

        % Value changed function: SidemEditField
        function SidemEditFieldValueChanged(app, event)
            app.EventTable.Data = [];
        end

        % Button pushed function: SavescenarioButton
        function SavescenarioButtonPushed(app, event)
            if (strcmp(app.SaveasDropDown.Value,'Scenario 1'))
                distError1 = app.prop_distError;
                anchornumber1 = app.prop_anchornumber;
                NetworkEnergyConsumption1 = app.prop_NetworkEnergyConsumption;
                save('myscenario1.mat','distError1','anchornumber1','NetworkEnergyConsumption1');
            end
            if (strcmp(app.SaveasDropDown.Value,'Scenario 2'))
                distError2 = app.prop_distError;
                anchornumber2 = app.prop_anchornumber;
                NetworkEnergyConsumption2 = app.prop_NetworkEnergyConsumption;
                save('myscenario2.mat','distError2','anchornumber2','NetworkEnergyConsumption2');
            end
            if (strcmp(app.SaveasDropDown.Value,'Scenario 3'))
                distError3 = app.prop_distError;
                anchornumber3 = app.prop_anchornumber;
                NetworkEnergyConsumption3 = app.prop_NetworkEnergyConsumption;
                save('myscenario3.mat','distError3','anchornumber3','NetworkEnergyConsumption3');
            end
            
        end

        % Button pushed function: CompareButton
        function CompareButtonPushed(app, event)
            nodenumber = app.NodeNumber.Value;
            timesim = app.SimulationTimesecEditField.Value;
            load('myscenario1.mat','distError1','anchornumber1','NetworkEnergyConsumption1');
            load('myscenario2.mat','distError2','anchornumber2','NetworkEnergyConsumption2');
            if isfile ('myscenario3.mat') %this condition is for only 2 scenarios, no 3rd scenario
                load('myscenario3.mat','distError3','anchornumber3','NetworkEnergyConsumption3');
            end
            
            figure('Name','Localization error (m)','NumberTitle','off');
            hold on; grid on;
            temp1 = num2str(mean(distError1(anchornumber1+1:size(distError1,1)),'omitnan'));
            temp2 = num2str(mean(distError2(anchornumber2+1:size(distError2,1)),'omitnan'));
            if isfile ('myscenario3.mat')
                temp3 = num2str(mean(distError3(anchornumber3+1:size(distError3,1)),'omitnan'));
                title(['Scenario1=',temp1,', Scenario2=',temp2,', Scenario3=',temp3,' (m)']);
            else
                title(['Scenario1=',temp1,', Scenario2=',temp2,' (m)']);
            end
            xlabel('Node ID')
            ylabel('Localization error (m)')
            plot((1:nodenumber),distError1(anchornumber1+1:size(distError1,1)),'r.','Markersize',20,'DisplayName','Scenario 1');
            plot((1:nodenumber),distError2(anchornumber2+1:size(distError2,1)),'g.','Markersize',20,'DisplayName','Scenario 2');
            if isfile ('myscenario3.mat')
                plot((1:nodenumber),distError3(anchornumber3+1:size(distError3,1)),'b.','Markersize',20,'DisplayName','Scenario 3');
            end
            legend;
            
            figure('Name','Energy consumption wrt Time: Network','NumberTitle','off');
            hold on; grid on;
            xlabel('Time (sec)')
            ylabel('Energy consumption(J)')
            xlim([0 timesim]);
            plot(1:timesim,NetworkEnergyConsumption1,'DisplayName','Scenario 1');
            plot(1:timesim,NetworkEnergyConsumption2,'DisplayName','Scenario 2');
            if isfile ('myscenario3.mat')
                plot(1:timesim,NetworkEnergyConsumption3,'DisplayName','Scenario 3');
            end
            legend('Location','northwest');
            
            
        end

        % Button pushed function: ClearallscenariosButton
        function ClearallscenariosButtonPushed(app, event)
            if isfile ('myscenario1.mat')
                delete('myscenario1.mat')
            end
            if isfile ('myscenario2.mat')
                delete('myscenario2.mat')
            end
            if isfile ('myscenario3.mat')
                delete('myscenario3.mat')
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 1072 745];
            app.UIFigure.Name = 'MATLAB App';
            app.UIFigure.Tag = 'myapp2';

            % Create TabGroup
            app.TabGroup = uitabgroup(app.UIFigure);
            app.TabGroup.Position = [1 2 1069 744];

            % Create SetupTab
            app.SetupTab = uitab(app.TabGroup);
            app.SetupTab.Title = 'Setup';

            % Create ScenariosetupPanel
            app.ScenariosetupPanel = uipanel(app.SetupTab);
            app.ScenariosetupPanel.Tooltip = {''};
            app.ScenariosetupPanel.Title = 'Scenario setup';
            app.ScenariosetupPanel.BackgroundColor = [0.902 0.902 0.902];
            app.ScenariosetupPanel.FontWeight = 'bold';
            app.ScenariosetupPanel.Position = [8 313 279 392];

            % Create NodenumberLabel
            app.NodenumberLabel = uilabel(app.ScenariosetupPanel);
            app.NodenumberLabel.Position = [8 312 76 22];
            app.NodenumberLabel.Text = 'Node number';

            % Create NodeNumber
            app.NodeNumber = uieditfield(app.ScenariosetupPanel, 'numeric');
            app.NodeNumber.ValueChangedFcn = createCallbackFcn(app, @NodeNumberValueChanged, true);
            app.NodeNumber.Position = [193 312 70 22];
            app.NodeNumber.Value = 10;

            % Create AnchornoderangemLabel
            app.AnchornoderangemLabel = uilabel(app.ScenariosetupPanel);
            app.AnchornoderangemLabel.Position = [8 171 127 22];
            app.AnchornoderangemLabel.Text = 'Anchor node range (m)';

            % Create RangeAnchor
            app.RangeAnchor = uieditfield(app.ScenariosetupPanel, 'numeric');
            app.RangeAnchor.ValueChangedFcn = createCallbackFcn(app, @RangeAnchorValueChanged, true);
            app.RangeAnchor.Position = [193 172 69 22];
            app.RangeAnchor.Value = 25;

            % Create NormalnoderangemLabel
            app.NormalnoderangemLabel = uilabel(app.ScenariosetupPanel);
            app.NormalnoderangemLabel.Position = [8 279 127 22];
            app.NormalnoderangemLabel.Text = 'Normal node range (m)';

            % Create RangeNode
            app.RangeNode = uieditfield(app.ScenariosetupPanel, 'numeric');
            app.RangeNode.Tooltip = {''};
            app.RangeNode.Position = [193 279 71 22];
            app.RangeNode.Value = 25;

            % Create NodedeploymentDropDownLabel
            app.NodedeploymentDropDownLabel = uilabel(app.ScenariosetupPanel);
            app.NodedeploymentDropDownLabel.Position = [8 242 108 22];
            app.NodedeploymentDropDownLabel.Text = 'Node deployment';

            % Create NodedeploymentDropDown
            app.NodedeploymentDropDown = uidropdown(app.ScenariosetupPanel);
            app.NodedeploymentDropDown.Items = {'Pre-saved', 'Random'};
            app.NodedeploymentDropDown.Position = [144 242 119 22];
            app.NodedeploymentDropDown.Value = 'Pre-saved';

            % Create AnchornumberautogeneratedLabel
            app.AnchornumberautogeneratedLabel = uilabel(app.ScenariosetupPanel);
            app.AnchornumberautogeneratedLabel.Position = [8 75 176 22];
            app.AnchornumberautogeneratedLabel.Text = 'Anchor number (auto generated)';

            % Create anchornumber
            app.anchornumber = uieditfield(app.ScenariosetupPanel, 'numeric');
            app.anchornumber.Editable = 'off';
            app.anchornumber.Position = [193 75 69 22];

            % Create SinkleaveblankforautoselectEditFieldLabel
            app.SinkleaveblankforautoselectEditFieldLabel = uilabel(app.ScenariosetupPanel);
            app.SinkleaveblankforautoselectEditFieldLabel.Position = [8 107 176 22];
            app.SinkleaveblankforautoselectEditFieldLabel.Text = 'Sink (leave blank for auto select)';

            % Create SinkleaveblankforautoselectEditField
            app.SinkleaveblankforautoselectEditField = uieditfield(app.ScenariosetupPanel, 'text');
            app.SinkleaveblankforautoselectEditField.HorizontalAlignment = 'right';
            app.SinkleaveblankforautoselectEditField.Tooltip = {'Leave this field blank for auto selecting the sink'};
            app.SinkleaveblankforautoselectEditField.Position = [193 107 69 22];

            % Create AnchordeploymentDropDownLabel
            app.AnchordeploymentDropDownLabel = uilabel(app.ScenariosetupPanel);
            app.AnchordeploymentDropDownLabel.Position = [8 206 105 22];
            app.AnchordeploymentDropDownLabel.Text = 'Anchor deployment';

            % Create AnchordeploymentDropDown
            app.AnchordeploymentDropDown = uidropdown(app.ScenariosetupPanel);
            app.AnchordeploymentDropDown.Items = {'Square Grid', 'Hexagonal Grid', 'Triangular Grid'};
            app.AnchordeploymentDropDown.ValueChangedFcn = createCallbackFcn(app, @AnchordeploymentDropDownValueChanged, true);
            app.AnchordeploymentDropDown.Position = [144 206 120 22];
            app.AnchordeploymentDropDown.Value = 'Square Grid';

            % Create NetworksizeEditFieldLabel
            app.NetworksizeEditFieldLabel = uilabel(app.ScenariosetupPanel);
            app.NetworksizeEditFieldLabel.Position = [8 344 72 22];
            app.NetworksizeEditFieldLabel.Text = 'Network size';

            % Create NetworksizeEditField
            app.NetworksizeEditField = uieditfield(app.ScenariosetupPanel, 'text');
            app.NetworksizeEditField.ValueChangedFcn = createCallbackFcn(app, @NetworksizeEditFieldValueChanged, true);
            app.NetworksizeEditField.HorizontalAlignment = 'right';
            app.NetworksizeEditField.Position = [193 344 70 22];
            app.NetworksizeEditField.Value = '100 100';

            % Create CreatescenarioButton
            app.CreatescenarioButton = uibutton(app.ScenariosetupPanel, 'push');
            app.CreatescenarioButton.ButtonPushedFcn = createCallbackFcn(app, @CreatescenarioButtonPushed, true);
            app.CreatescenarioButton.BackgroundColor = [0.8 0.8 0.8];
            app.CreatescenarioButton.Position = [68 14 108 27];
            app.CreatescenarioButton.Text = 'Create scenario';

            % Create SidemEditFieldLabel
            app.SidemEditFieldLabel = uilabel(app.ScenariosetupPanel);
            app.SidemEditFieldLabel.Position = [8 139 51 22];
            app.SidemEditFieldLabel.Text = 'Side (m)';

            % Create SidemEditField
            app.SidemEditField = uieditfield(app.ScenariosetupPanel, 'text');
            app.SidemEditField.ValueChangedFcn = createCallbackFcn(app, @SidemEditFieldValueChanged, true);
            app.SidemEditField.HorizontalAlignment = 'right';
            app.SidemEditField.Visible = 'off';
            app.SidemEditField.Tooltip = {'Leave blank for auto-select'};
            app.SidemEditField.Position = [193 139 70 22];

            % Create PacketsizesetupPanel
            app.PacketsizesetupPanel = uipanel(app.SetupTab);
            app.PacketsizesetupPanel.Title = 'Packet size setup';
            app.PacketsizesetupPanel.BackgroundColor = [0.902 0.902 0.902];
            app.PacketsizesetupPanel.FontWeight = 'bold';
            app.PacketsizesetupPanel.Position = [10 186 281 116];

            % Create WakeupbyteEditFieldLabel
            app.WakeupbyteEditFieldLabel = uilabel(app.PacketsizesetupPanel);
            app.WakeupbyteEditFieldLabel.Position = [4 64 87 22];
            app.WakeupbyteEditFieldLabel.Text = 'Wake-up (byte)';

            % Create WakeupbyteEditField
            app.WakeupbyteEditField = uieditfield(app.PacketsizesetupPanel, 'numeric');
            app.WakeupbyteEditField.Position = [195 67 68 22];
            app.WakeupbyteEditField.Value = 20;

            % Create BroadcastbyteEditFieldLabel
            app.BroadcastbyteEditFieldLabel = uilabel(app.PacketsizesetupPanel);
            app.BroadcastbyteEditFieldLabel.Position = [4 39 94 22];
            app.BroadcastbyteEditFieldLabel.Text = 'Broadcast (byte)';

            % Create BroadcastbyteEditField
            app.BroadcastbyteEditField = uieditfield(app.PacketsizesetupPanel, 'numeric');
            app.BroadcastbyteEditField.Position = [195 39 68 22];
            app.BroadcastbyteEditField.Value = 20;

            % Create DatabyteLabel
            app.DatabyteLabel = uilabel(app.PacketsizesetupPanel);
            app.DatabyteLabel.Position = [4 11 65 22];
            app.DatabyteLabel.Text = 'Data (byte)';

            % Create DataPacketEditField
            app.DataPacketEditField = uieditfield(app.PacketsizesetupPanel, 'numeric');
            app.DataPacketEditField.Position = [195 11 68 22];
            app.DataPacketEditField.Value = 40;

            % Create SimulationsetupPanel
            app.SimulationsetupPanel = uipanel(app.SetupTab);
            app.SimulationsetupPanel.Title = 'Simulation setup';
            app.SimulationsetupPanel.BackgroundColor = [0.902 0.902 0.902];
            app.SimulationsetupPanel.FontWeight = 'bold';
            app.SimulationsetupPanel.Position = [300 186 272 519];

            % Create NodeEventsButtonGroup
            app.NodeEventsButtonGroup = uibuttongroup(app.SimulationsetupPanel);
            app.NodeEventsButtonGroup.Title = 'Node Events';
            app.NodeEventsButtonGroup.BackgroundColor = [0.902 0.902 0.902];
            app.NodeEventsButtonGroup.Position = [5 376 257 86];

            % Create RandomEvent
            app.RandomEvent = uiradiobutton(app.NodeEventsButtonGroup);
            app.RandomEvent.Text = 'Random';
            app.RandomEvent.Position = [11 39 67 22];
            app.RandomEvent.Value = true;

            % Create ManualEvent
            app.ManualEvent = uiradiobutton(app.NodeEventsButtonGroup);
            app.ManualEvent.Tooltip = {'Enter events (sec) separated by space'; 'or'; 'events column matrix'};
            app.ManualEvent.Text = 'Manual';
            app.ManualEvent.Position = [11 11 65 22];

            % Create ManualeventEditField
            app.ManualeventEditField = uieditfield(app.NodeEventsButtonGroup, 'text');
            app.ManualeventEditField.HorizontalAlignment = 'right';
            app.ManualeventEditField.Tooltip = {'Enter events (sec) separated by space'; 'or'; 'events column matrix'};
            app.ManualeventEditField.Position = [77 11 169 22];

            % Create EventTable
            app.EventTable = uitable(app.SimulationsetupPanel);
            app.EventTable.ColumnName = {'Node event'; 'Node ID'};
            app.EventTable.RowName = {};
            app.EventTable.Position = [31 160 207 137];

            % Create Pause1
            app.Pause1 = uicheckbox(app.SimulationsetupPanel);
            app.Pause1.Text = 'Pause simulation after each node deployed';
            app.Pause1.Position = [5 101 254 22];

            % Create Pause2
            app.Pause2 = uicheckbox(app.SimulationsetupPanel);
            app.Pause2.Text = 'Pause simulation for dead node detection';
            app.Pause2.Position = [5 72 245 22];

            % Create Pause3
            app.Pause3 = uicheckbox(app.SimulationsetupPanel);
            app.Pause3.Text = 'Pause simulation for critical node detection ';
            app.Pause3.Position = [5 44 256 22];

            % Create Pause4
            app.Pause4 = uicheckbox(app.SimulationsetupPanel);
            app.Pause4.Text = 'Pause simulation for restored node detection ';
            app.Pause4.Position = [5 16 266 22];

            % Create GeneratenodeeventsButton
            app.GeneratenodeeventsButton = uibutton(app.SimulationsetupPanel, 'push');
            app.GeneratenodeeventsButton.ButtonPushedFcn = createCallbackFcn(app, @GeneratenodeeventsButtonPushed, true);
            app.GeneratenodeeventsButton.BackgroundColor = [0.8 0.8 0.8];
            app.GeneratenodeeventsButton.Position = [61 337 145 28];
            app.GeneratenodeeventsButton.Text = 'Generate node events';

            % Create SimulationTimesecEditFieldLabel
            app.SimulationTimesecEditFieldLabel = uilabel(app.SimulationsetupPanel);
            app.SimulationTimesecEditFieldLabel.HorizontalAlignment = 'right';
            app.SimulationTimesecEditFieldLabel.Position = [5 473 121 22];
            app.SimulationTimesecEditFieldLabel.Text = 'Simulation Time (sec)';

            % Create SimulationTimesecEditField
            app.SimulationTimesecEditField = uieditfield(app.SimulationsetupPanel, 'numeric');
            app.SimulationTimesecEditField.ValueChangedFcn = createCallbackFcn(app, @SimulationTimesecEditFieldValueChanged, true);
            app.SimulationTimesecEditField.Position = [163 473 63 22];
            app.SimulationTimesecEditField.Value = 100;

            % Create SaveEventsTable
            app.SaveEventsTable = uibutton(app.SimulationsetupPanel, 'push');
            app.SaveEventsTable.ButtonPushedFcn = createCallbackFcn(app, @SaveEventsTableButtonPushed, true);
            app.SaveEventsTable.BackgroundColor = [0.8 0.8 0.8];
            app.SaveEventsTable.Position = [61 306 68 22];
            app.SaveEventsTable.Text = 'Save';

            % Create LoadEventsTable
            app.LoadEventsTable = uibutton(app.SimulationsetupPanel, 'push');
            app.LoadEventsTable.ButtonPushedFcn = createCallbackFcn(app, @LoadEventsTableButtonPushed, true);
            app.LoadEventsTable.BackgroundColor = [0.8 0.8 0.8];
            app.LoadEventsTable.Position = [138 306 68 22];
            app.LoadEventsTable.Text = 'Load';

            % Create Pause0
            app.Pause0 = uicheckbox(app.SimulationsetupPanel);
            app.Pause0.Text = 'Auto pause for 1sec for each event';
            app.Pause0.Position = [5 128 209 22];

            % Create NodestatussetupPanel
            app.NodestatussetupPanel = uipanel(app.SetupTab);
            app.NodestatussetupPanel.Title = 'Node status setup';
            app.NodestatussetupPanel.BackgroundColor = [0.902 0.902 0.902];
            app.NodestatussetupPanel.FontWeight = 'bold';
            app.NodestatussetupPanel.Position = [8 5 564 166];

            % Create DeadNodesTable
            app.DeadNodesTable = uitable(app.NodestatussetupPanel);
            app.DeadNodesTable.ColumnName = {'Node ID'; 'Node Event'};
            app.DeadNodesTable.RowName = {};
            app.DeadNodesTable.Position = [173 6 184 106];

            % Create AddtodeadnodesButton
            app.AddtodeadnodesButton = uibutton(app.NodestatussetupPanel, 'push');
            app.AddtodeadnodesButton.ButtonPushedFcn = createCallbackFcn(app, @AddtodeadnodesButtonPushed, true);
            app.AddtodeadnodesButton.BackgroundColor = [0.8 0.8 0.8];
            app.AddtodeadnodesButton.Position = [9 46 147 27];
            app.AddtodeadnodesButton.Text = 'Add to dead nodes';

            % Create AddtorestorednodesButton
            app.AddtorestorednodesButton = uibutton(app.NodestatussetupPanel, 'push');
            app.AddtorestorednodesButton.ButtonPushedFcn = createCallbackFcn(app, @AddtorestorednodesButtonPushed, true);
            app.AddtorestorednodesButton.BackgroundColor = [0.8 0.8 0.8];
            app.AddtorestorednodesButton.Position = [9 6 147 27];
            app.AddtorestorednodesButton.Text = 'Add to restored nodes';

            % Create DeadnodesLabel
            app.DeadnodesLabel = uilabel(app.NodestatussetupPanel);
            app.DeadnodesLabel.FontWeight = 'bold';
            app.DeadnodesLabel.FontColor = [0.149 0.149 0.149];
            app.DeadnodesLabel.Position = [176 117 74 22];
            app.DeadnodesLabel.Text = 'Dead nodes';

            % Create RestorednodesLabel
            app.RestorednodesLabel = uilabel(app.NodestatussetupPanel);
            app.RestorednodesLabel.FontWeight = 'bold';
            app.RestorednodesLabel.FontColor = [0.149 0.149 0.149];
            app.RestorednodesLabel.Position = [375 107 96 38];
            app.RestorednodesLabel.Text = 'Restored nodes';

            % Create ClearDeadTableButton
            app.ClearDeadTableButton = uibutton(app.NodestatussetupPanel, 'push');
            app.ClearDeadTableButton.ButtonPushedFcn = createCallbackFcn(app, @ClearDeadTableButtonPushed, true);
            app.ClearDeadTableButton.BackgroundColor = [0.8 0.8 0.8];
            app.ClearDeadTableButton.Position = [289 118 68 22];
            app.ClearDeadTableButton.Text = 'Clear table';

            % Create ClearRestoredTableButton
            app.ClearRestoredTableButton = uibutton(app.NodestatussetupPanel, 'push');
            app.ClearRestoredTableButton.ButtonPushedFcn = createCallbackFcn(app, @ClearRestoredTableButtonPushed, true);
            app.ClearRestoredTableButton.BackgroundColor = [0.8 0.8 0.8];
            app.ClearRestoredTableButton.Position = [487 117 68 23];
            app.ClearRestoredTableButton.Text = 'Clear table';

            % Create NodeEventEditFieldLabel
            app.NodeEventEditFieldLabel = uilabel(app.NodestatussetupPanel);
            app.NodeEventEditFieldLabel.Position = [5 88 64 22];
            app.NodeEventEditFieldLabel.Text = 'Node Event';

            % Create NodeEventEditField
            app.NodeEventEditField = uieditfield(app.NodestatussetupPanel, 'numeric');
            app.NodeEventEditField.Position = [84 88 81 22];

            % Create NodeIDEditFieldLabel
            app.NodeIDEditFieldLabel = uilabel(app.NodestatussetupPanel);
            app.NodeIDEditFieldLabel.HorizontalAlignment = 'right';
            app.NodeIDEditFieldLabel.Position = [0 118 50 22];
            app.NodeIDEditFieldLabel.Text = 'Node ID';

            % Create NodeIDEditField
            app.NodeIDEditField = uieditfield(app.NodestatussetupPanel, 'numeric');
            app.NodeIDEditField.Position = [83 118 81 22];

            % Create RestoredNodesTable
            app.RestoredNodesTable = uitable(app.NodestatussetupPanel);
            app.RestoredNodesTable.ColumnName = {'Node ID'; 'Node Event'};
            app.RestoredNodesTable.RowName = {};
            app.RestoredNodesTable.Position = [375 6 184 107];

            % Create GraphsetupPanel
            app.GraphsetupPanel = uipanel(app.SetupTab);
            app.GraphsetupPanel.Title = 'Graph setup';
            app.GraphsetupPanel.BackgroundColor = [0.902 0.902 0.902];
            app.GraphsetupPanel.FontWeight = 'bold';
            app.GraphsetupPanel.Position = [844 310 213 395];

            % Create ShowallgraphsCheckBox
            app.ShowallgraphsCheckBox = uicheckbox(app.GraphsetupPanel);
            app.ShowallgraphsCheckBox.ValueChangedFcn = createCallbackFcn(app, @ShowallgraphsCheckBoxValueChanged, true);
            app.ShowallgraphsCheckBox.Text = 'Show all graphs';
            app.ShowallgraphsCheckBox.Position = [10 349 107 22];

            % Create LocalizationerrorCheckBox
            app.LocalizationerrorCheckBox = uicheckbox(app.GraphsetupPanel);
            app.LocalizationerrorCheckBox.Text = 'Localization error ';
            app.LocalizationerrorCheckBox.Position = [10 317 117 22];

            % Create EnergyconsumptionwrtnodeIDCheckBox
            app.EnergyconsumptionwrtnodeIDCheckBox = uicheckbox(app.GraphsetupPanel);
            app.EnergyconsumptionwrtnodeIDCheckBox.Text = 'Energy consumption wrt node ID';
            app.EnergyconsumptionwrtnodeIDCheckBox.Position = [10 271 197 22];

            % Create EnergyconsumptionwrttimeCheckBox
            app.EnergyconsumptionwrttimeCheckBox = uicheckbox(app.GraphsetupPanel);
            app.EnergyconsumptionwrttimeCheckBox.Text = 'Energy consumption wrt time';
            app.EnergyconsumptionwrttimeCheckBox.Position = [8 220 207 27];

            % Create StackedenergyconsumptionCheckBox
            app.StackedenergyconsumptionCheckBox = uicheckbox(app.GraphsetupPanel);
            app.StackedenergyconsumptionCheckBox.Tooltip = {'WuRx monitoring + on-demand'};
            app.StackedenergyconsumptionCheckBox.Text = {'Stacked graph'; 'energy consumption wrt time '};
            app.StackedenergyconsumptionCheckBox.Position = [9 96 179 27];

            % Create SwitchEnergyConsumption
            app.SwitchEnergyConsumption = uiswitch(app.GraphsetupPanel, 'slider');
            app.SwitchEnergyConsumption.Items = {'Joules', 'Percentage'};
            app.SwitchEnergyConsumption.Position = [68 257 32 14];
            app.SwitchEnergyConsumption.Value = 'Joules';

            % Create StackednergyconsumptionTextField
            app.StackednergyconsumptionTextField = uieditfield(app.GraphsetupPanel, 'text');
            app.StackednergyconsumptionTextField.HorizontalAlignment = 'right';
            app.StackednergyconsumptionTextField.Tooltip = {'nodeID/nodeIDs'; '(Enter node IDs separated by spaces or column matrix)'};
            app.StackednergyconsumptionTextField.Position = [29 68 173 22];

            % Create EnergyconsumptionofnodeTextField
            app.EnergyconsumptionofnodeTextField = uieditfield(app.GraphsetupPanel, 'text');
            app.EnergyconsumptionofnodeTextField.HorizontalAlignment = 'right';
            app.EnergyconsumptionofnodeTextField.Tooltip = {'Leave blank for ''all nodes'''; 'or'; 'Enter node IDs separated by spaces or column matrix'};
            app.EnergyconsumptionofnodeTextField.Position = [98 140 103 22];

            % Create AllnodesindividualCheckBox
            app.AllnodesindividualCheckBox = uicheckbox(app.GraphsetupPanel);
            app.AllnodesindividualCheckBox.Text = 'All nodes (individual)';
            app.AllnodesindividualCheckBox.Position = [28 181 133 22];

            % Create AnchorsindividualCheckBox
            app.AnchorsindividualCheckBox = uicheckbox(app.GraphsetupPanel);
            app.AnchorsindividualCheckBox.Text = 'Anchors (individual)';
            app.AnchorsindividualCheckBox.Position = [28 161 127 22];

            % Create NodesCheckBox
            app.NodesCheckBox = uicheckbox(app.GraphsetupPanel);
            app.NodesCheckBox.Text = 'Nodes:';
            app.NodesCheckBox.Position = [28 139 60 22];

            % Create wrttimeCheckBox
            app.wrttimeCheckBox = uicheckbox(app.GraphsetupPanel);
            app.wrttimeCheckBox.Text = 'wrt time';
            app.wrttimeCheckBox.Position = [29 44 64 22];

            % Create pertimestampCheckBox
            app.pertimestampCheckBox = uicheckbox(app.GraphsetupPanel);
            app.pertimestampCheckBox.Text = 'per time stamp';
            app.pertimestampCheckBox.Position = [29 26 101 22];

            % Create wrtdeploymentareaCheckBox
            app.wrtdeploymentareaCheckBox = uicheckbox(app.GraphsetupPanel);
            app.wrtdeploymentareaCheckBox.Text = 'wrt deployment area';
            app.wrtdeploymentareaCheckBox.Position = [29 299 131 22];

            % Create NetworkAvgenergyconsmpCheckBox
            app.NetworkAvgenergyconsmpCheckBox = uicheckbox(app.GraphsetupPanel);
            app.NetworkAvgenergyconsmpCheckBox.Text = 'Network (Avg. energy consmp)';
            app.NetworkAvgenergyconsmpCheckBox.Position = [28 201 187 22];

            % Create EnergysetupPanel
            app.EnergysetupPanel = uipanel(app.SetupTab);
            app.EnergysetupPanel.Title = 'Energy setup';
            app.EnergysetupPanel.BackgroundColor = [0.902 0.902 0.902];
            app.EnergysetupPanel.FontWeight = 'bold';
            app.EnergysetupPanel.Position = [586 254 242 451];

            % Create InitialEnergyJLabel
            app.InitialEnergyJLabel = uilabel(app.EnergysetupPanel);
            app.InitialEnergyJLabel.Position = [8 401 92 22];
            app.InitialEnergyJLabel.Text = 'Initial Energy (J)';

            % Create Eo
            app.Eo = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Eo.Position = [168 401 62 22];
            app.Eo.Value = 1;

            % Create WuRxEnergyCosumpWEditFieldLabel
            app.WuRxEnergyCosumpWEditFieldLabel = uilabel(app.EnergysetupPanel);
            app.WuRxEnergyCosumpWEditFieldLabel.Position = [8 369 163 22];
            app.WuRxEnergyCosumpWEditFieldLabel.Text = 'WuRx Energy Cosump (W)';

            % Create WuRxEnergyCosumpWEditField
            app.WuRxEnergyCosumpWEditField = uieditfield(app.EnergysetupPanel, 'numeric');
            app.WuRxEnergyCosumpWEditField.Position = [168 369 62 22];
            app.WuRxEnergyCosumpWEditField.Value = 7.5e-06;

            % Create CriticalPowerEditFieldLabel
            app.CriticalPowerEditFieldLabel = uilabel(app.EnergysetupPanel);
            app.CriticalPowerEditFieldLabel.Position = [8 338 102 22];
            app.CriticalPowerEditFieldLabel.Text = 'Critical Power (%)';

            % Create CriticalPowerEditField
            app.CriticalPowerEditField = uieditfield(app.EnergysetupPanel, 'numeric');
            app.CriticalPowerEditField.Position = [168 338 62 22];
            app.CriticalPowerEditField.Value = 15;

            % Create TransmitterGaindBLabel
            app.TransmitterGaindBLabel = uilabel(app.EnergysetupPanel);
            app.TransmitterGaindBLabel.Position = [8 275 120 22];
            app.TransmitterGaindBLabel.Text = 'Transmitter Gain (dB)';

            % Create Gtx
            app.Gtx = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Gtx.Position = [168 275 62 22];

            % Create ReceiverGaindBLabel
            app.ReceiverGaindBLabel = uilabel(app.EnergysetupPanel);
            app.ReceiverGaindBLabel.Position = [8 243 108 22];
            app.ReceiverGaindBLabel.Text = 'Receiver Gain (dB)';

            % Create Grx
            app.Grx = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Grx.Position = [168 243 62 22];

            % Create FrequencyMHzLabel
            app.FrequencyMHzLabel = uilabel(app.EnergysetupPanel);
            app.FrequencyMHzLabel.Position = [8 211 96 22];
            app.FrequencyMHzLabel.Text = 'Frequency (MHz)';

            % Create Freq
            app.Freq = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Freq.Position = [168 211 62 22];
            app.Freq.Value = 868;

            % Create PathlossexponentLabel
            app.PathlossexponentLabel = uilabel(app.EnergysetupPanel);
            app.PathlossexponentLabel.Position = [8 180 108 22];
            app.PathlossexponentLabel.Text = 'Path-loss exponent';

            % Create pathLossExponent
            app.pathLossExponent = uieditfield(app.EnergysetupPanel, 'numeric');
            app.pathLossExponent.Position = [168 180 62 22];
            app.pathLossExponent.Value = 2;

            % Create GaussianrandomdBLabel
            app.GaussianrandomdBLabel = uilabel(app.EnergysetupPanel);
            app.GaussianrandomdBLabel.Position = [8 148 126 22];
            app.GaussianrandomdBLabel.Text = 'Gaussian random (dB)';

            % Create Gaussian
            app.Gaussian = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Gaussian.Position = [168 148 62 22];
            app.Gaussian.Value = 1;

            % Create EelecnJbitLabel
            app.EelecnJbitLabel = uilabel(app.EnergysetupPanel);
            app.EelecnJbitLabel.Position = [8 116 75 22];
            app.EelecnJbitLabel.Text = 'Eelec (nJ/bit)';

            % Create Eelec
            app.Eelec = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Eelec.Position = [168 116 62 22];
            app.Eelec.Value = 50;

            % Create EfspJbitm2Label
            app.EfspJbitm2Label = uilabel(app.EnergysetupPanel);
            app.EfspJbitm2Label.Position = [8 85 88 22];
            app.EfspJbitm2Label.Text = 'Efs (pJ/bit/m^2)';

            % Create Efs
            app.Efs = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Efs.Position = [168 85 62 22];
            app.Efs.Value = 10;

            % Create EmppJbitm4Label
            app.EmppJbitm4Label = uilabel(app.EnergysetupPanel);
            app.EmppJbitm4Label.Position = [8 53 95 22];
            app.EmppJbitm4Label.Text = 'Emp (pJ/bit/m^4)';

            % Create Emp
            app.Emp = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Emp.Position = [168 53 62 22];
            app.Emp.Value = 0.0013;

            % Create DrefmLabel
            app.DrefmLabel = uilabel(app.EnergysetupPanel);
            app.DrefmLabel.Position = [8 22 49 22];
            app.DrefmLabel.Text = 'Dref (m)';

            % Create Dref
            app.Dref = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Dref.Position = [168 22 62 22];
            app.Dref.Value = 1;

            % Create PtxWLabel
            app.PtxWLabel = uilabel(app.EnergysetupPanel);
            app.PtxWLabel.Position = [8 307 67 22];
            app.PtxWLabel.Text = 'Ptx (W)';

            % Create Pt
            app.Pt = uieditfield(app.EnergysetupPanel, 'numeric');
            app.Pt.Position = [168 307 62 22];
            app.Pt.Value = 0.001;

            % Create ComparisionpanelPanel
            app.ComparisionpanelPanel = uipanel(app.SetupTab);
            app.ComparisionpanelPanel.Title = 'Comparision panel';
            app.ComparisionpanelPanel.BackgroundColor = [0.902 0.902 0.902];
            app.ComparisionpanelPanel.FontWeight = 'bold';
            app.ComparisionpanelPanel.Position = [586 4 242 237];

            % Create SaveasLabel
            app.SaveasLabel = uilabel(app.ComparisionpanelPanel);
            app.SaveasLabel.HorizontalAlignment = 'right';
            app.SaveasLabel.Position = [33 175 52 22];
            app.SaveasLabel.Text = 'Save as:';

            % Create SaveasDropDown
            app.SaveasDropDown = uidropdown(app.ComparisionpanelPanel);
            app.SaveasDropDown.Items = {'Scenario 1', 'Scenario 2', 'Scenario 3'};
            app.SaveasDropDown.Position = [100 175 100 22];
            app.SaveasDropDown.Value = 'Scenario 1';

            % Create ClearallscenariosButton
            app.ClearallscenariosButton = uibutton(app.ComparisionpanelPanel, 'push');
            app.ClearallscenariosButton.ButtonPushedFcn = createCallbackFcn(app, @ClearallscenariosButtonPushed, true);
            app.ClearallscenariosButton.BackgroundColor = [0.8 0.8 0.8];
            app.ClearallscenariosButton.Position = [59 96 114 22];
            app.ClearallscenariosButton.Text = 'Clear all scenarios';

            % Create CompareButton
            app.CompareButton = uibutton(app.ComparisionpanelPanel, 'push');
            app.CompareButton.ButtonPushedFcn = createCallbackFcn(app, @CompareButtonPushed, true);
            app.CompareButton.BackgroundColor = [0.8 0.8 0.8];
            app.CompareButton.Position = [57 32 121 37];
            app.CompareButton.Text = 'Compare';

            % Create SavescenarioButton
            app.SavescenarioButton = uibutton(app.ComparisionpanelPanel, 'push');
            app.SavescenarioButton.ButtonPushedFcn = createCallbackFcn(app, @SavescenarioButtonPushed, true);
            app.SavescenarioButton.BackgroundColor = [0.8 0.8 0.8];
            app.SavescenarioButton.Position = [60 133 114 22];
            app.SavescenarioButton.Text = 'Save scenario';

            % Create RunSimulationButton
            app.RunSimulationButton = uibutton(app.SetupTab, 'push');
            app.RunSimulationButton.ButtonPushedFcn = createCallbackFcn(app, @RunSimulationButtonPushed, true);
            app.RunSimulationButton.BackgroundColor = [0.4667 0.6745 0.1882];
            app.RunSimulationButton.FontSize = 16;
            app.RunSimulationButton.FontColor = [1 1 1];
            app.RunSimulationButton.Position = [844 80 207 43];
            app.RunSimulationButton.Text = 'Run Simulation';

            % Create ClearallButton
            app.ClearallButton = uibutton(app.SetupTab, 'push');
            app.ClearallButton.ButtonPushedFcn = createCallbackFcn(app, @ClearallButtonPushed, true);
            app.ClearallButton.BackgroundColor = [0.8 0.8 0.8];
            app.ClearallButton.Position = [844 30 100 26];
            app.ClearallButton.Text = 'Clear all';

            % Create ClearcacheButton
            app.ClearcacheButton = uibutton(app.SetupTab, 'push');
            app.ClearcacheButton.ButtonPushedFcn = createCallbackFcn(app, @ClearcacheButtonPushed, true);
            app.ClearcacheButton.BackgroundColor = [0.8 0.8 0.8];
            app.ClearcacheButton.Position = [951 30 100 26];
            app.ClearcacheButton.Text = 'Clear cache';

            % Create v18Label
            app.v18Label = uilabel(app.SetupTab);
            app.v18Label.Position = [1024 0 27 22];
            app.v18Label.Text = 'v.18';

            % Create OutputTab
            app.OutputTab = uitab(app.TabGroup);
            app.OutputTab.Title = 'Output';

            % Create CommandwindowTextArea
            app.CommandwindowTextArea = uitextarea(app.OutputTab);
            app.CommandwindowTextArea.Position = [8 11 279 471];

            % Create DatabaseTable
            app.DatabaseTable = uitable(app.OutputTab);
            app.DatabaseTable.ColumnName = {'True location'; 'Estim. location'; 'Loc. error (m)'; 'Path to sink'; 'Path dist. (m)'; 'Neighbour list'; 'Status'};
            app.DatabaseTable.Position = [308 11 749 679];

            % Create SummaryTextArea
            app.SummaryTextArea = uitextarea(app.OutputTab);
            app.SummaryTextArea.Position = [8 514 279 173];

            % Create SummaryLabel
            app.SummaryLabel = uilabel(app.OutputTab);
            app.SummaryLabel.FontWeight = 'bold';
            app.SummaryLabel.Position = [13 686 64 22];
            app.SummaryLabel.Text = 'Summary:';

            % Create LogLabel
            app.LogLabel = uilabel(app.OutputTab);
            app.LogLabel.FontWeight = 'bold';
            app.LogLabel.Position = [11 481 31 22];
            app.LogLabel.Text = 'Log:';

            % Create MatricesTab
            app.MatricesTab = uitab(app.TabGroup);
            app.MatricesTab.Title = 'Matrices';

            % Create TabGroup2
            app.TabGroup2 = uitabgroup(app.MatricesTab);
            app.TabGroup2.Position = [1 4 1059 711];

            % Create EnergyTab
            app.EnergyTab = uitab(app.TabGroup2);
            app.EnergyTab.Title = 'Energy';

            % Create EtTable
            app.EtTable = uitable(app.EnergyTab);
            app.EtTable.Position = [0 -1 1056 683];

            % Create OndemandTab
            app.OndemandTab = uitab(app.TabGroup2);
            app.OndemandTab.Title = 'On-demand';

            % Create EtodTable
            app.EtodTable = uitable(app.OndemandTab);
            app.EtodTable.Position = [1 1 1055 681];

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = localizationApplication

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end